%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 15.0.2
%%For: (Big Kahuna) ()
%%Title: (paint_brush_&_bucket.eps)
%%CreationDate: 8/21/2012 9:02 PM
%%Canvassize: 16383
%%BoundingBox: 12 -696 708 -24
%%HiResBoundingBox: 12.3252 -695.3193 707.6748 -24.6807
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset AGM_Gradient 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%CMYKProcessColor: 0.75021 0.679683 0.670222 0.90164 (Black)
%%+ 0.54995 0.465064 0.4607 0.115328 (R=118 G=118 B=118)
%%+ 0.362341 0.574029 0.840574 0.226169 (R=140 G=98 B=57)
%%+ 0.418494 0.340734 0.345922 0.008057 (R=155 G=155 B=155)
%%+ 0.315953 0.491829 0.739315 0.098909 (R=166 G=124 B=82)
%%+ 0.36704 0.280827 1 0.023896 (R=171 G=160 B=0)
%%+ 0.251957 0.1991 0.204257 0 (R=191 G=191 B=191)
%%+ 0.226719 0.383947 0.636683 0.01181 (R=198 G=156 B=109)
%%+ 0.138735 1 1 0.04889 (R=202 G=0 B=0)
%%+ 0.198367 0.154147 0.159182 0 (R=203 G=203 B=203)
%%+ 0.092561 0.067353 0.072053 0 (R=228 G=228 B=228)
%%+ 0.004456 0.991424 0.973236 0.000946 (R=237 G=28 B=36)
%%+ 0.018952 0 0.488899 0 (R=255 G=247 B=153)
%%+ 0 0.873075 0.719539 0 (R=255 G=68 B=68)
%%+ 0 0.993988 1 0 (RGB Red)
%%+ 0 0 0 0 (White)
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_TemplateBox: 360.5 -360.5 360.5 -360.5
%AI3_TileBox: 54 -756 666 36
%AI3_DocumentPreview: Header
%AI5_ArtSize: 720 720
%AI5_RulerUnits: 0
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -305 20 1.37 1821 1013 18 0 0 49 125 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:0 -720
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MS
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade true put
userdict /_aicmykps true put
userdict /_forceToCMYK true put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Tracing Object) (Tracing) (TracingSuite.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (flare.aip)
%AI8_PluginGroupInfo
(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe Symbolism) (Symbolism.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe Compound Shape) (PathFinder Suite.aip)
%AI5_End_NonPrinting--
1 Bn
%AI5_BeginGradient: (Unnamed gradient)
(Unnamed gradient) 0 2 Bd
[
<
01020304050608090A0B0C0D0E0F101112131415161718191A1B1C1C1D1E1F202223242425262727
2829292A2A2B2C2D2D2E2F2F303131323333343434353536
>
<
FDFDFEFEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
>
<
F8F8FAFBFDFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
>
<
00000000000101010101010101020202020303030304040405050506070708090A0B0C0C0D0E0F10
101112131415161718191A1B1C1D1E1F2021222325262728
>
<
EDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECCCBCAC9C8C7C6C5
C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEAD
>
<
1C1C1B1B1A1A19191818181717161615151414141313121211111010100F0F0E0E0D0D0C0C0C0B0B
0A0A09090808080707060605050404040303020201010000
>
<
242423232222212120201F1F1E1E1D1D1C1C1B1B1A1A1A1919181817171616151514141313121211
111010100F0F0E0E0D0D0C0C0B0B0A0A0909080807070606
>
4 %_Br
[
0.211429 1 1 0.156649 0.678431 0 0.023529 2 50 100 %_BS
%_0.211429 1 1 0.156649 0.678431 0 0.023529 2 50 100 Bs
0.004456 0.991424 0.973236 0.000946 0.929412 0.109804 0.141176 2 50 0 %_BS
%_0.004456 0.991424 0.973236 0.000946 0.929412 0.109804 0.141176 2 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginPalette
0 0 Pb
0.75021 0.679683 0.670222 0.90164 0 0 0 (Black) 0 1 Xk
(Black)
Pc
Bb
2 (Unnamed gradient) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Unnamed gradient)
Pc
0 0 0 0 1 1 1 (White) 0 1 Xk
(White)
Pc
0 0.993988 1 0 1 0 0 (RGB Red) 0 1 Xk
(RGB Red)
Pc
0.092561 0.067353 0.072053 0 0.894118 0.894118 0.894118 (R=228 G=228 B=228) 0 1 Xk
(R=228 G=228 B=228)
Pc
0.251957 0.1991 0.204257 0 0.74902 0.74902 0.74902 (R=191 G=191 B=191) 0 1 Xk
(R=191 G=191 B=191)
Pc
0.54995 0.465064 0.4607 0.115328 0.462745 0.462745 0.462745 (R=118 G=118 B=118) 0 1 Xk
(R=118 G=118 B=118)
Pc
0.138735 1 1 0.04889 0.792157 0 0 (R=202 G=0 B=0) 0 1 Xk
(R=202 G=0 B=0)
Pc
0 0.873075 0.719539 0 1 0.266667 0.266667 (R=255 G=68 B=68) 0 1 Xk
(R=255 G=68 B=68)
Pc
0.004456 0.991424 0.973236 0.000946 0.929412 0.109804 0.141176 (R=237 G=28 B=36) 0 1 Xk
(R=237 G=28 B=36)
Pc
0.018952 0 0.488899 0 1 0.968627 0.6 (R=255 G=247 B=153) 0 1 Xk
(R=255 G=247 B=153)
Pc
0.315953 0.491829 0.739315 0.098909 0.65098 0.486275 0.321569 (R=166 G=124 B=82) 0 1 Xk
(R=166 G=124 B=82)
Pc
0.418494 0.340734 0.345922 0.008057 0.607843 0.607843 0.607843 (R=155 G=155 B=155) 0 1 Xk
(R=155 G=155 B=155)
Pc
0.362341 0.574029 0.840574 0.226169 0.54902 0.384314 0.223529 (R=140 G=98 B=57) 0 1 Xk
(R=140 G=98 B=57)
Pc
0.198367 0.154147 0.159182 0 0.796078 0.796078 0.796078 (R=203 G=203 B=203) 0 1 Xk
(R=203 G=203 B=203)
Pc
0.36704 0.280827 1 0.023896 0.670588 0.627451 0 (R=171 G=160 B=0) 0 1 Xk
(R=171 G=160 B=0)
Pc
0.226719 0.383947 0.636683 0.01181 0.776471 0.611765 0.427451 (R=198 G=156 B=109) 0 1 Xk
(R=198 G=156 B=109)
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(paint_bk) Ln
0 A
u
u
*u
0 O
0.75021 0.679683 0.670222 0.90164 0 0 0 (Black) 0 1 Xk
0 J 0 j 1 w 10 M []0 d1 XR
670.7148 -559.6934 m
680.6484 -563.7598 689.0156 -568.6436 695.8154 -574.3438 C
704.4814 -581.6104 708.3984 -588.6768 707.5654 -595.5439 C
706.5654 -603.877 700.4316 -610.3105 689.165 -614.8438 C
684.0654 -617.9766 676.6816 -620.6436 667.0156 -622.8438 C
657.3818 -625.0098 649.8818 -626.5098 644.5156 -627.3438 C
626.5488 -630.3105 607.749 -631.8936 588.1152 -632.0938 C
559.6484 -633.127 537.2148 -633.4268 520.8154 -632.9932 C
513.7822 -632.627 505.999 -632.3105 497.4648 -632.0439 C
480.4648 -631.5098 468.2822 -631.5098 460.915 -632.0439 C
454.0488 -632.3438 450.3486 -633.7598 449.8154 -636.2939 C
449.3486 -638.5938 451.4482 -641.5771 456.1152 -645.2432 C
463.0654 -650.1934 L
474.165 -659.96 478.8486 -667.6768 477.1152 -673.3438 C
475.1484 -679.71 464.9648 -684.6768 446.5654 -688.2432 C
420.4316 -693.2432 390.915 -695.5938 358.0151 -695.2939 C
339.4487 -695.127 305.8984 -693.4434 257.3652 -690.2432 C
224.8652 -688.1104 194.0151 -684.3936 164.8154 -679.0938 C
136.1484 -673.8936 108.2485 -667.0098 81.1152 -658.4434 C
70.2817 -655.0439 58.5151 -650.6934 45.8154 -645.3936 C
39.5483 -642.7939 33.8652 -639.4434 28.7651 -635.3438 C
24.3984 -631.7773 20.2319 -627.46 16.2651 -622.3936 C
14.2651 -619.8271 12.9985 -617.2773 12.4653 -614.7432 C
11.6318 -607.1104 14.5151 -600.4434 21.1152 -594.7432 C
39.3154 -580.6768 63.5483 -571.46 93.8154 -567.0938 C
124.0483 -562.7266 151.7153 -557.9268 176.8154 -552.6934 C
197.582 -549.9268 200.3652 -544.3604 185.165 -535.9932 C
160.0986 -520.1934 164.5317 -509.3604 198.4653 -503.4932 C
237.2319 -497.8271 278.0986 -495.7266 321.0654 -497.1934 C
324.165 -497.127 333.7651 -497.3604 349.8652 -497.8936 C
368.2314 -498.4932 381.2822 -499.1602 389.0156 -499.8936 C
442.749 -504.7939 495.8154 -512.8936 548.2148 -524.1934 C
554.1816 -525.2939 567.3154 -528.4268 587.6152 -533.5938 C
607.749 -538.7266 622.1152 -542.5771 630.7148 -545.1436 C
641.3818 -548.2432 654.7148 -553.0938 670.7148 -559.6934 C
f
157.6152 -529.5439 m
160.7817 -531.5771 163.1821 -533.8105 164.8154 -536.2432 C
166.5151 -538.7432 165.6152 -541.2432 162.1152 -543.7432 C
159.4819 -545.6436 156.165 -547.1436 152.165 -548.2432 C
146.3984 -549.8438 140.8984 -550.71 135.665 -550.8438 C
130.0654 -551.377 122.1987 -550.877 112.0654 -549.3438 C
101.9653 -547.8438 96.2817 -543.9434 95.0151 -537.6436 C
95.9819 -530.5098 101.5483 -526.2266 111.7153 -524.7939 C
121.915 -523.4268 129.9321 -523.1768 135.7651 -524.0439 C
142.2651 -524.5771 147.1987 -525.2939 150.5654 -526.1934 C
152.665 -526.7598 155.0151 -527.877 157.6152 -529.5439 C
f
*U
*u
0 g
677.5156 -569.7939 m
685.3154 -573.9932 691.165 -578.1768 695.0654 -582.3438 C
706.2314 -594.3105 699.6152 -603.8105 675.2148 -610.8438 C
663.7148 -614.1436 651.8154 -616.4932 639.5156 -617.8936 C
589.082 -623.2598 538.1152 -625.5098 486.6152 -624.6436 C
480.8486 -624.5098 473.1152 -624.7939 463.415 -625.4932 C
457.6152 -625.96 453.3154 -626.627 450.5156 -627.4932 C
446.6152 -628.6934 444.0654 -630.5938 442.8652 -633.1934 C
442.8652 -633.4434 L
442.0654 -635.5771 442.7988 -638.3604 445.0654 -641.7939 C
447.4648 -645.4268 451.1982 -649.0771 456.2656 -652.7432 C
458.6982 -654.4434 460.749 -656.0439 462.415 -657.5439 C
465.6484 -660.877 467.7988 -664.3604 468.8652 -667.9932 C
469.499 -670.1934 466.1318 -672.6768 458.7656 -675.4434 C
450.9316 -678.4102 442.0488 -680.2266 432.1152 -680.8936 C
409.1152 -683.4932 389.415 -684.7939 373.0156 -684.7939 c
360.1484 -684.7939 339.2651 -684.1602 310.3652 -682.8936 C
268.165 -681.0273 233.4487 -678.4766 206.2153 -675.2432 C
161.3486 -669.9102 119.0654 -661.0938 79.3652 -648.7939 C
67.9985 -645.46 55.4985 -640.4434 41.8652 -633.7432 C
27.7983 -626.877 20.1318 -619.1602 18.8652 -610.5938 C
18.5317 -608.2939 18.8486 -606.0605 19.8154 -603.8936 C
20.6152 -602.0938 21.6821 -600.6602 23.0151 -599.5938 C
32.2817 -592.127 42.582 -586.46 53.915 -582.5938 C
62.8818 -579.4932 75.6318 -576.627 92.165 -573.9932 C
121.9653 -569.2939 148.5483 -564.8438 171.915 -560.6436 C
187.6484 -557.377 197.4487 -553.377 201.3154 -548.6436 c
205.1821 -543.9102 200.1821 -537.4268 186.3154 -529.1934 C
176.3486 -523.0938 173.6152 -518.6104 178.1152 -515.7432 C
182.582 -512.877 190.1821 -510.6768 200.915 -509.1436 C
227.7817 -505.0098 256.4653 -502.7939 286.9653 -502.4932 C
297.165 -502.3604 315.0317 -502.8105 340.5654 -503.8438 C
369.165 -504.9766 390.2822 -506.2432 403.915 -507.6436 C
429.8154 -510.5439 455.915 -514.5098 482.2148 -519.5439 C
515.8154 -525.377 546.1152 -531.46 573.1152 -537.7939 C
604.7822 -545.1934 634.082 -553.4102 661.0156 -562.4434 C
666.0488 -564.1436 671.5488 -566.5938 677.5156 -569.7939 C
f
158.5151 -538.8438 m
157.0151 -540.6436 151.3984 -542.2773 141.665 -543.7432 C
132.7983 -544.71 126.1152 -545.0273 121.6152 -544.6934 C
114.6484 -544.1934 108.2817 -542.2432 102.5151 -538.8438 C
101.4819 -538.2432 101.2153 -537.4102 101.7153 -536.3438 C
102.082 -535.5771 102.7983 -534.7598 103.8652 -533.8936 C
109.832 -530.127 118.8818 -528.4102 131.0151 -528.7432 C
138.1484 -528.9434 144.8154 -529.9932 151.0151 -531.8936 C
158.0483 -534.0273 160.5483 -536.3438 158.5151 -538.8438 C
Bb
1 (Unnamed gradient) 359.4531 -616.7207 -270.2804 145.4018 1 0 0 1 0 0 Bg
0.711494 145.4001 691.6147 -3.38432 16.4985 -615.043 Xm
40.431 8262.4238 691.6147 -3.38432 -23.9326 -8877.4668 Bc
0.711494 145.4001 691.6147 -3.38432 16.4985 -615.043 Bm
40.431 8262.4238 691.6147 -3.38432 17.21 -469.6426 Bc
f
0 BB
*U
*u
0.75021 0.679683 0.670222 0.90164 0 0 0 (Black) 0 1 Xk
670.7148 -559.6934 m
680.6484 -563.7598 689.0156 -568.6436 695.8154 -574.3438 C
704.4814 -581.6104 708.3984 -588.6768 707.5654 -595.5439 C
706.5654 -603.877 700.4316 -610.3105 689.165 -614.8438 C
684.0654 -617.9766 676.6816 -620.6436 667.0156 -622.8438 C
657.3818 -625.0098 649.8818 -626.5098 644.5156 -627.3438 C
626.5488 -630.3105 607.749 -631.8936 588.1152 -632.0938 C
559.6484 -633.127 537.2148 -633.4268 520.8154 -632.9932 C
513.7822 -632.627 505.999 -632.3105 497.4648 -632.0439 C
480.4648 -631.5098 468.2822 -631.5098 460.915 -632.0439 C
454.0488 -632.3438 450.3486 -633.7598 449.8154 -636.2939 C
449.3486 -638.5938 451.4482 -641.5771 456.1152 -645.2432 C
463.0654 -650.1934 L
474.165 -659.96 478.8486 -667.6768 477.1152 -673.3438 C
475.1484 -679.71 464.9648 -684.6768 446.5654 -688.2432 C
420.4316 -693.2432 390.915 -695.5938 358.0151 -695.2939 C
339.4487 -695.127 305.8984 -693.4434 257.3652 -690.2432 C
224.8652 -688.1104 194.0151 -684.3936 164.8154 -679.0938 C
136.1484 -673.8936 108.2485 -667.0098 81.1152 -658.4434 C
70.2817 -655.0439 58.5151 -650.6934 45.8154 -645.3936 C
39.5483 -642.7939 33.8652 -639.4434 28.7651 -635.3438 C
24.3984 -631.7773 20.2319 -627.46 16.2651 -622.3936 C
14.2651 -619.8271 12.9985 -617.2773 12.4653 -614.7432 C
11.6318 -607.1104 14.5151 -600.4434 21.1152 -594.7432 C
39.3154 -580.6768 63.5483 -571.46 93.8154 -567.0938 C
124.0483 -562.7266 151.7153 -557.9268 176.8154 -552.6934 C
197.582 -549.9268 200.3652 -544.3604 185.165 -535.9932 C
160.0986 -520.1934 164.5317 -509.3604 198.4653 -503.4932 C
237.2319 -497.8271 278.0986 -495.7266 321.0654 -497.1934 C
324.165 -497.127 333.7651 -497.3604 349.8652 -497.8936 C
368.2314 -498.4932 381.2822 -499.1602 389.0156 -499.8936 C
442.749 -504.7939 495.8154 -512.8936 548.2148 -524.1934 C
554.1816 -525.2939 567.3154 -528.4268 587.6152 -533.5938 C
607.749 -538.7266 622.1152 -542.5771 630.7148 -545.1436 C
641.3818 -548.2432 654.7148 -553.0938 670.7148 -559.6934 C
f
1 D
677.5156 -569.7939 m
671.5488 -566.5938 666.0488 -564.1436 661.0156 -562.4434 C
634.082 -553.4102 604.7822 -545.1934 573.1152 -537.7939 C
546.1152 -531.46 515.8154 -525.377 482.2148 -519.5439 C
455.915 -514.5098 429.8154 -510.5439 403.915 -507.6436 C
390.2822 -506.2432 369.165 -504.9766 340.5654 -503.8438 C
315.0317 -502.8105 297.165 -502.3604 286.9653 -502.4932 C
256.4653 -502.7939 227.7817 -505.0098 200.915 -509.1436 C
190.1821 -510.6768 182.582 -512.877 178.1152 -515.7432 C
173.6152 -518.6104 176.3486 -523.0938 186.3154 -529.1934 C
200.1821 -537.4268 205.1821 -543.9102 201.3154 -548.6436 c
197.4487 -553.377 187.6484 -557.377 171.915 -560.6436 C
148.5483 -564.8438 121.9653 -569.2939 92.165 -573.9932 C
75.6318 -576.627 62.8818 -579.4932 53.915 -582.5938 C
42.582 -586.46 32.2817 -592.127 23.0151 -599.5938 C
21.6821 -600.6602 20.6152 -602.0938 19.8154 -603.8936 C
18.8486 -606.0605 18.5317 -608.2939 18.8652 -610.5938 C
20.1318 -619.1602 27.7983 -626.877 41.8652 -633.7432 C
55.4985 -640.4434 67.9985 -645.46 79.3652 -648.7939 C
119.0654 -661.0938 161.3486 -669.9102 206.2153 -675.2432 C
233.4487 -678.4766 268.165 -681.0273 310.3652 -682.8936 C
339.2651 -684.1602 360.1484 -684.7939 373.0156 -684.7939 c
389.415 -684.7939 409.1152 -683.4932 432.1152 -680.8936 C
442.0488 -680.2266 450.9316 -678.4102 458.7656 -675.4434 C
466.1318 -672.6768 469.499 -670.1934 468.8652 -667.9932 C
467.7988 -664.3604 465.6484 -660.877 462.415 -657.5439 C
460.749 -656.0439 458.6982 -654.4434 456.2656 -652.7432 C
451.1982 -649.0771 447.4648 -645.4268 445.0654 -641.7939 C
442.7988 -638.3604 442.0654 -635.5771 442.8652 -633.4434 C
442.8652 -633.1934 L
444.0654 -630.5938 446.6152 -628.6934 450.5156 -627.4932 C
453.3154 -626.627 457.6152 -625.96 463.415 -625.4932 C
473.1152 -624.7939 480.8486 -624.5098 486.6152 -624.6436 C
538.1152 -625.5098 589.082 -623.2598 639.5156 -617.8936 C
651.8154 -616.4932 663.7148 -614.1436 675.2148 -610.8438 C
699.6152 -603.8105 706.2314 -594.3105 695.0654 -582.3438 C
691.165 -578.1768 685.3154 -573.9932 677.5156 -569.7939 C
f
158.5151 -538.8438 m
160.5483 -536.3438 158.0483 -534.0273 151.0151 -531.8936 C
144.8154 -529.9932 138.1484 -528.9434 131.0151 -528.7432 C
118.8818 -528.4102 109.832 -530.127 103.8652 -533.8936 C
102.7983 -534.7598 102.082 -535.5771 101.7153 -536.3438 C
101.2153 -537.4102 101.4819 -538.2432 102.5151 -538.8438 C
108.2817 -542.2432 114.6484 -544.1934 121.6152 -544.6934 C
126.1152 -545.0273 132.7983 -544.71 141.665 -543.7432 C
151.3984 -542.2773 157.0151 -540.6436 158.5151 -538.8438 C
f
0 D
150.5654 -526.1934 m
152.665 -526.7598 155.0151 -527.877 157.6152 -529.5439 C
160.7817 -531.5771 163.1821 -533.8105 164.8154 -536.2432 C
166.5151 -538.7432 165.6152 -541.2432 162.1152 -543.7432 C
159.4819 -545.6436 156.165 -547.1436 152.165 -548.2432 C
146.3984 -549.8438 140.8984 -550.71 135.665 -550.8438 C
130.0654 -551.377 122.1987 -550.877 112.0654 -549.3438 C
101.9653 -547.8438 96.2817 -543.9434 95.0151 -537.6436 C
95.9819 -530.5098 101.5483 -526.2266 111.7153 -524.7939 C
121.915 -523.4268 129.9321 -523.1768 135.7651 -524.0439 C
142.2651 -524.5771 147.1987 -525.2939 150.5654 -526.1934 C
f
*U
0 0 0 0 1 1 1 (White) 0 1 Xk
684.4648 -592.4932 m
683.1982 -595.0273 680.8818 -596.8271 677.5156 -597.8936 C
640.8818 -608.7266 607.7988 -613.4766 578.2656 -612.1436 C
571.4316 -611.8105 564.3652 -611.21 557.0654 -610.3438 C
549.8984 -609.4434 547.1982 -609.0273 548.9648 -609.0938 C
572.3652 -610.127 597.7656 -608.6768 625.165 -604.7432 C
646.3984 -601.6768 666.165 -597.5938 684.4648 -592.4932 C
f
*u
0 g
677.5156 -569.7939 m
685.3154 -573.9932 691.165 -578.1768 695.0654 -582.3438 C
706.2314 -594.3105 699.6152 -603.8105 675.2148 -610.8438 C
663.7148 -614.1436 651.8154 -616.4932 639.5156 -617.8936 C
589.082 -623.2598 538.1152 -625.5098 486.6152 -624.6436 C
480.8486 -624.5098 473.1152 -624.7939 463.415 -625.4932 C
457.6152 -625.96 453.3154 -626.627 450.5156 -627.4932 C
446.6152 -628.6934 444.0654 -630.5938 442.8652 -633.1934 C
442.8652 -633.4434 L
442.0654 -635.5771 442.7988 -638.3604 445.0654 -641.7939 C
447.4648 -645.4268 451.1982 -649.0771 456.2656 -652.7432 C
458.6982 -654.4434 460.749 -656.0439 462.415 -657.5439 C
465.6484 -660.877 467.7988 -664.3604 468.8652 -667.9932 C
469.499 -670.1934 466.1318 -672.6768 458.7656 -675.4434 C
450.9316 -678.4102 442.0488 -680.2266 432.1152 -680.8936 C
409.1152 -683.4932 389.415 -684.7939 373.0156 -684.7939 c
360.1484 -684.7939 339.2651 -684.1602 310.3652 -682.8936 C
268.165 -681.0273 233.4487 -678.4766 206.2153 -675.2432 C
161.3486 -669.9102 119.0654 -661.0938 79.3652 -648.7939 C
67.9985 -645.46 55.4985 -640.4434 41.8652 -633.7432 C
27.7983 -626.877 20.1318 -619.1602 18.8652 -610.5938 C
18.5317 -608.2939 18.8486 -606.0605 19.8154 -603.8936 C
20.6152 -602.0938 21.6821 -600.6602 23.0151 -599.5938 C
32.2817 -592.127 42.582 -586.46 53.915 -582.5938 C
62.8818 -579.4932 75.6318 -576.627 92.165 -573.9932 C
121.9653 -569.2939 148.5483 -564.8438 171.915 -560.6436 C
187.6484 -557.377 197.4487 -553.377 201.3154 -548.6436 c
205.1821 -543.9102 200.1821 -537.4268 186.3154 -529.1934 C
176.3486 -523.0938 173.6152 -518.6104 178.1152 -515.7432 C
182.582 -512.877 190.1821 -510.6768 200.915 -509.1436 C
227.7817 -505.0098 256.4653 -502.7939 286.9653 -502.4932 C
297.165 -502.3604 315.0317 -502.8105 340.5654 -503.8438 C
369.165 -504.9766 390.2822 -506.2432 403.915 -507.6436 C
429.8154 -510.5439 455.915 -514.5098 482.2148 -519.5439 C
515.8154 -525.377 546.1152 -531.46 573.1152 -537.7939 C
604.7822 -545.1934 634.082 -553.4102 661.0156 -562.4434 C
666.0488 -564.1436 671.5488 -566.5938 677.5156 -569.7939 C
f
1 D
0 g
684.4648 -592.4932 m
666.165 -597.5938 646.3984 -601.6768 625.165 -604.7432 C
597.7656 -608.6768 572.3652 -610.127 548.9648 -609.0938 C
547.1982 -609.0273 549.8984 -609.4434 557.0654 -610.3438 C
564.3652 -611.21 571.4316 -611.8105 578.2656 -612.1436 C
607.7988 -613.4766 640.8818 -608.7266 677.5156 -597.8936 C
680.8818 -596.8271 683.1982 -595.0273 684.4648 -592.4932 C
f
0 D
0 g
151.0151 -531.8936 m
158.0483 -534.0273 160.5483 -536.3438 158.5151 -538.8438 C
157.0151 -540.6436 151.3984 -542.2773 141.665 -543.7432 C
132.7983 -544.71 126.1152 -545.0273 121.6152 -544.6934 C
114.6484 -544.1934 108.2817 -542.2432 102.5151 -538.8438 C
101.4819 -538.2432 101.2153 -537.4102 101.7153 -536.3438 C
102.082 -535.5771 102.7983 -534.7598 103.8652 -533.8936 C
109.832 -530.127 118.8818 -528.4102 131.0151 -528.7432 C
138.1484 -528.9434 144.8154 -529.9932 151.0151 -531.8936 C
f
1 D
128.7651 -652.8936 m
163.165 -660.6934 199.582 -665.6934 238.0151 -667.8936 C
253.1821 -668.7598 272.0986 -669.6436 294.7651 -670.5439 C
327.665 -671.8438 345.915 -672.5771 349.5151 -672.7432 C
364.2148 -673.4102 377.3154 -673.6934 388.8154 -673.5938 C
400.5156 -673.4932 410.4814 -672.6104 418.7148 -670.9434 C
420.4814 -670.6104 421.9316 -670.0938 423.0654 -669.3936 C
424.0322 -668.7266 424.6318 -668.0605 424.8652 -667.3936 C
393.8652 -668.0938 346.8652 -667.1602 283.8652 -664.5938 C
221.0317 -661.9932 172.8486 -656.6436 139.3154 -648.5439 C
105.4819 -640.377 84.5654 -634.9102 76.5654 -632.1436 C
80.2983 -635.8105 85.7817 -639.0771 93.0151 -641.9434 C
105.1484 -646.71 117.0654 -650.3604 128.7651 -652.8936 C
Bb
1 (Unnamed gradient) 359.4531 -616.7207 -270.2804 145.4018 1 0 0 1 0 0 Bg
0.711494 145.4001 691.6147 -3.38432 16.4985 -615.043 Xm
40.431 8262.4238 691.6147 -3.38432 -23.9326 -8877.4668 Bc
0.711494 145.4001 691.6147 -3.38432 16.4985 -615.043 Bm
40.431 8262.4238 691.6147 -3.38432 17.21 -469.6426 Bc
f
0 BB
*U
0 D
0 0 0 0 1 1 1 (White) 0 1 Xk
128.7651 -652.8936 m
117.0654 -650.3604 105.1484 -646.71 93.0151 -641.9434 C
85.7817 -639.0771 80.2983 -635.8105 76.5654 -632.1436 C
84.5654 -634.9102 105.4819 -640.377 139.3154 -648.5439 C
172.8486 -656.6436 221.0317 -661.9932 283.8652 -664.5938 C
346.8652 -667.1602 393.8652 -668.0938 424.8652 -667.3936 C
424.6318 -668.0605 424.0322 -668.7266 423.0654 -669.3936 C
421.9316 -670.0938 420.4814 -670.6104 418.7148 -670.9434 C
410.4814 -672.6104 400.5156 -673.4932 388.8154 -673.5938 C
377.3154 -673.6934 364.2148 -673.4102 349.5151 -672.7432 C
345.915 -672.5771 327.665 -671.8438 294.7651 -670.5439 C
272.0986 -669.6436 253.1821 -668.7598 238.0151 -667.8936 C
199.582 -665.6934 163.165 -660.6934 128.7651 -652.8936 C
f
U
u
*u
0.75021 0.679683 0.670222 0.90164 0 0 0 (Black) 0 1 Xk
408.415 -230.894 m
434.6816 -228.6606 460.2314 -227.7607 485.0654 -228.1938 C
508.7988 -228.3271 532.1152 -229.2441 555.0156 -230.9438 C
565.3818 -231.7441 577.0654 -233.1938 590.0654 -235.2939 C
603.0322 -237.394 613.0654 -240.894 620.165 -245.7939 C
623.5322 -247.894 625.7656 -250.4775 626.8652 -253.5439 C
628.332 -258.7773 627.6484 -262.894 624.8154 -265.894 C
624.7822 -275.0605 624.3652 -282.3774 623.5654 -287.8442 C
621.2314 -311.3105 619.082 -334.8271 617.1152 -358.394 C
629.415 -382.3936 638.665 -406.4766 644.8652 -430.6436 C
648.499 -444.1436 649.7988 -457.9102 648.7656 -471.9434 C
648.665 -477.3105 647.415 -482.1768 645.0156 -486.5439 C
640.3486 -493.0771 634.8652 -494.4766 628.5654 -490.7432 C
622.2314 -487.0439 617.2148 -482.6934 613.5156 -477.6934 C
613.0156 -477.0605 612.3984 -476.1768 611.665 -475.0439 C
612.5986 -496.71 613.249 -518.3438 613.6152 -539.9434 C
613.749 -542.5098 614.165 -547.5439 614.8652 -555.0439 C
615.332 -561.377 615.2314 -564.7266 614.5654 -565.0938 C
604.9316 -572.1602 594.2314 -578.21 582.4648 -583.2432 C
570.3652 -588.4434 557.7148 -592.3105 544.5156 -594.8438 C
493.6484 -605.7432 438.6484 -601.9268 379.5156 -583.3936 C
374.2148 -581.5938 366.9814 -578.4268 357.8154 -573.8936 C
347.7485 -568.8936 341.5986 -564.0273 339.3652 -559.2939 C
338.7983 -557.8936 338.5151 -555.8604 338.5151 -553.1934 C
338.6484 -549.6602 338.7485 -546.7773 338.8154 -544.5439 C
339.0151 -537.877 339.2153 -533.0771 339.415 -530.1436 C
341.1152 -469.5098 340.2651 -409.6602 336.8652 -350.5942 C
336.332 -347.2607 334.7651 -333.7275 332.165 -309.9941 C
329.3984 -284.6606 328.0151 -270.0605 328.0151 -266.1938 C
327.9819 -260.7275 328.0151 -257.4438 328.1152 -256.3442 C
328.3154 -253.3105 328.8818 -250.894 329.8154 -249.0942 C
331.9819 -245.0273 337.6318 -241.9609 346.7651 -239.894 C
369.2656 -234.7939 389.8154 -231.7939 408.415 -230.894 C
f
1 D
624.3154 -473.2939 m
627.8818 -476.9268 630.999 -478.8105 633.665 -478.9434 C
635.4648 -478.4434 636.6484 -476.9268 637.2148 -474.3936 C
637.915 -463.1934 636.9814 -452.21 634.415 -441.4434 C
629.7148 -422.0098 623.2822 -402.96 615.1152 -384.2939 C
613.3154 -409.0273 612.1816 -433.8105 611.7148 -458.6436 C
613.249 -460.877 614.8154 -462.9102 616.415 -464.7432 C
618.1152 -466.8105 620.749 -469.6602 624.3154 -473.2939 c
f
*U
*u
0 D
0 0.993988 1 0 1 0 0 (RGB Red) 0 1 Xk
336.415 -253.394 m
336.7817 -252.8271 337.1987 -252.2773 337.665 -251.7441 C
340.4985 -257.9438 347.8486 -262.394 359.7153 -265.0942 C
371.5488 -267.8271 381.0156 -269.5605 388.1152 -270.2939 C
448.9482 -278.1938 506.7988 -277.5605 561.665 -268.394 C
565.8652 -267.7607 570.0488 -267.3442 574.2148 -267.144 C
573.3154 -267.5107 572.4316 -267.9272 571.5654 -268.394 C
563.7656 -272.2939 554.1816 -281.0605 542.8154 -294.6938 C
534.3154 -304.894 527.249 -314.5942 521.6152 -323.7939 C
518.3818 -329.2275 514.0986 -334.4272 508.7656 -339.394 C
503.4648 -344.2939 498.1318 -343.3774 492.7656 -336.644 C
489.3984 -331.8105 485.9316 -327.0439 482.3652 -322.3442 C
463.5322 -302.5771 447.7314 -304.9438 434.9648 -329.4438 C
434.0322 -332.0771 432.3984 -335.9775 430.0654 -341.144 C
427.6982 -346.3105 425.165 -349.1606 422.4648 -349.6938 C
419.999 -348.9609 418.665 -345.8774 418.4648 -340.4438 C
418.2314 -335.0107 418.1152 -331.0439 418.1152 -328.5439 C
417.6484 -324.9438 416.0488 -321.2939 413.3154 -317.5942 C
410.5488 -313.9272 407.2314 -313.3608 403.3652 -315.894 C
402.5654 -316.3271 401.7822 -316.9609 401.0156 -317.7939 C
395.415 -325.3608 392.7988 -335.7275 393.165 -348.894 C
393.5322 -362.0273 394.4482 -373.2266 395.915 -382.4932 C
397.249 -390.7598 398.2822 -400.9932 399.0156 -413.1934 C
399.3818 -419.7266 399.1152 -425.1934 398.2148 -429.5938 C
397.1484 -434.5938 395.1816 -438.5771 392.3154 -441.5439 C
389.1484 -444.8105 386.0654 -446.46 383.0654 -446.4932 C
380.1318 -446.4932 377.5156 -444.96 375.2148 -441.8936 C
370.6816 -435.8604 367.9482 -429.5771 367.0156 -423.0439 C
363.8486 -392.1436 365.3818 -361.6768 371.6152 -331.644 C
371.9482 -329.7441 372.249 -327.4106 372.5156 -324.644 C
373.4482 -315.8105 373.165 -308.7441 371.665 -303.4438 C
370.3984 -299.4106 367.749 -297.4941 363.7148 -297.6938 C
358.2817 -298.394 353.582 -301.9941 349.6152 -308.4941 C
345.6821 -314.9941 342.8486 -321.3774 341.1152 -327.644 C
339.915 -318.2441 338.7319 -308.8774 337.5654 -299.5439 C
335.1987 -280.9106 333.9653 -270.8105 333.8652 -269.2441 C
333.5986 -263.3442 334.4487 -258.0605 336.415 -253.394 C
f
442.165 -359.7939 m
443.2988 -358.9272 444.7148 -360.0771 446.415 -363.2432 C
448.1484 -366.4766 448.999 -369.8271 448.9648 -373.2939 C
448.9316 -380.4268 447.4482 -385.71 444.5156 -389.1436 C
439.9814 -392.6768 437.1982 -391.4102 436.165 -385.3438 C
435.1318 -379.2432 434.8818 -374.5439 435.415 -371.2432 C
436.5488 -366.1768 438.7988 -362.3604 442.165 -359.7939 C
f
*U
*u
0.75021 0.679683 0.670222 0.90164 0 0 0 (Black) 0 1 Xk
408.415 -230.894 m
434.6816 -228.6606 460.2314 -227.7607 485.0654 -228.1938 C
508.7988 -228.3271 532.1152 -229.2441 555.0156 -230.9438 C
565.3818 -231.7441 577.0654 -233.1938 590.0654 -235.2939 C
603.0322 -237.394 613.0654 -240.894 620.165 -245.7939 C
623.5322 -247.894 625.7656 -250.4775 626.8652 -253.5439 C
628.332 -258.7773 627.6484 -262.894 624.8154 -265.894 C
624.7822 -275.0605 624.3652 -282.3774 623.5654 -287.8442 C
621.2314 -311.3105 619.082 -334.8271 617.1152 -358.394 C
629.415 -382.3936 638.665 -406.4766 644.8652 -430.6436 C
648.499 -444.1436 649.7988 -457.9102 648.7656 -471.9434 C
648.665 -477.3105 647.415 -482.1768 645.0156 -486.5439 C
640.3486 -493.0771 634.8652 -494.4766 628.5654 -490.7432 C
622.2314 -487.0439 617.2148 -482.6934 613.5156 -477.6934 C
613.0156 -477.0605 612.3984 -476.1768 611.665 -475.0439 C
612.5986 -496.71 613.249 -518.3438 613.6152 -539.9434 C
613.749 -542.5098 614.165 -547.5439 614.8652 -555.0439 C
615.332 -561.377 615.2314 -564.7266 614.5654 -565.0938 C
604.9316 -572.1602 594.2314 -578.21 582.4648 -583.2432 C
570.3652 -588.4434 557.7148 -592.3105 544.5156 -594.8438 C
493.6484 -605.7432 438.6484 -601.9268 379.5156 -583.3936 C
374.2148 -581.5938 366.9814 -578.4268 357.8154 -573.8936 C
347.7485 -568.8936 341.5986 -564.0273 339.3652 -559.2939 C
338.7983 -557.8936 338.5151 -555.8604 338.5151 -553.1934 C
338.6484 -549.6602 338.7485 -546.7773 338.8154 -544.5439 C
339.0151 -537.877 339.2153 -533.0771 339.415 -530.1436 C
341.1152 -469.5098 340.2651 -409.6602 336.8652 -350.5942 C
336.332 -347.2607 334.7651 -333.7275 332.165 -309.9941 C
329.3984 -284.6606 328.0151 -270.0605 328.0151 -266.1938 C
327.9819 -260.7275 328.0151 -257.4438 328.1152 -256.3442 C
328.3154 -253.3105 328.8818 -250.894 329.8154 -249.0942 C
331.9819 -245.0273 337.6318 -241.9609 346.7651 -239.894 C
369.2656 -234.7939 389.8154 -231.7939 408.415 -230.894 C
f
1 D
369.915 -240.1938 m
358.5151 -241.8271 349.8154 -243.9941 343.8154 -246.6938 C
339.4819 -248.6606 339.2817 -251.1606 343.2153 -254.1938 C
343.1152 -250.6606 350.582 -247.6108 365.6152 -245.0439 C
389.4814 -241.0439 414.6318 -238.394 441.0654 -237.0942 C
459.7314 -236.1938 481.0986 -235.9272 505.165 -236.2939 C
536.7656 -236.1938 566.4648 -239.4438 594.2656 -246.0439 C
599.0986 -247.5107 602.9316 -248.5942 605.7656 -249.2939 C
606.2656 -249.394 606.8154 -249.5273 607.415 -249.6938 C
610.2148 -250.5942 612.6982 -251.5107 614.8652 -252.4438 C
614.915 -252.4438 L
615.0156 -252.4941 L
615.1816 -252.6274 615.3486 -252.7773 615.5156 -252.9438 C
615.8818 -253.2441 616.1816 -253.5273 616.415 -253.7939 C
616.8154 -254.2607 617.082 -254.6938 617.2148 -255.0942 C
617.3818 -255.5942 617.415 -256.1108 617.3154 -256.644 C
616.9482 -258.0107 615.8486 -259.2939 614.0156 -260.4941 C
604.6152 -264.2607 596.3818 -266.5771 589.3154 -267.4438 C
587.415 -267.8774 584.0322 -268.5771 579.165 -269.5439 C
572.6982 -272.3442 566.5654 -276.3774 560.7656 -281.644 C
575.6318 -279.3105 590.5156 -275.9272 605.415 -271.4941 C
608.9814 -270.1606 612.4316 -268.5942 615.7656 -266.7939 C
620.5986 -262.7607 622.7314 -258.9272 622.165 -255.2939 C
621.5654 -251.5605 618.2148 -248.6274 612.1152 -246.4941 C
601.3486 -242.7607 588.5156 -239.7109 573.6152 -237.3442 C
560.6816 -235.3105 547.332 -233.9609 533.5654 -233.2939 C
517.9648 -232.5942 496.915 -232.3442 470.415 -232.5439 C
445.5488 -232.4775 420.2988 -233.894 394.665 -236.7939 C
388.2988 -237.5942 380.0488 -238.7275 369.915 -240.1938 C
f
359.0654 -251.144 m
352.332 -252.7441 347.8486 -254.2275 345.6152 -255.5942 C
345.9487 -255.9609 348.9985 -257.0771 354.7651 -258.9438 C
361.2979 -261.0439 366.5986 -262.4272 370.665 -263.0942 C
371.4648 -262.7607 372.2822 -262.5107 373.1152 -262.3442 C
401.3818 -257.1772 430.499 -254.9106 460.4648 -255.5439 C
472.8984 -255.3774 485.2822 -255.2441 497.6152 -255.144 C
514.8486 -255.3442 532.1816 -256.1772 549.6152 -257.644 C
553.749 -257.9106 559.832 -258.4438 567.8652 -259.2441 C
575.9316 -260.0771 582.5986 -261.2939 587.8652 -262.894 C
588.0322 -262.8271 588.1816 -262.7939 588.3154 -262.7939 C
596.3486 -261.3608 604.6152 -258.6772 613.1152 -254.7441 C
612.749 -254.6108 612.4316 -254.5107 612.165 -254.4438 C
588.2314 -247.2773 562.6318 -242.9106 535.3652 -241.3442 C
509.7314 -240.0439 485.5654 -239.7109 462.8652 -240.3442 C
437.499 -241.0439 412.5322 -242.9609 387.9648 -246.0942 C
376.5986 -247.5605 366.9648 -249.2441 359.0654 -251.144 C
f
337.665 -251.7441 m
337.1987 -252.2773 336.7817 -252.8271 336.415 -253.394 C
334.4487 -258.0605 333.5986 -263.3442 333.8652 -269.2441 C
333.9653 -270.8105 335.1987 -280.9106 337.5654 -299.5439 C
338.7319 -308.8774 339.915 -318.2441 341.1152 -327.644 C
342.8486 -321.3774 345.6821 -314.9941 349.6152 -308.4941 C
353.582 -301.9941 358.2817 -298.394 363.7148 -297.6938 C
367.749 -297.4941 370.3984 -299.4106 371.665 -303.4438 C
373.165 -308.7441 373.4482 -315.8105 372.5156 -324.644 C
372.249 -327.4106 371.9482 -329.7441 371.6152 -331.644 C
365.3818 -361.6768 363.8486 -392.1436 367.0156 -423.0439 C
367.9482 -429.5771 370.6816 -435.8604 375.2148 -441.8936 C
377.5156 -444.96 380.1318 -446.4932 383.0654 -446.4932 C
386.0654 -446.46 389.1484 -444.8105 392.3154 -441.5439 C
395.1816 -438.5771 397.1484 -434.5938 398.2148 -429.5938 C
399.1152 -425.1934 399.3818 -419.7266 399.0156 -413.1934 C
398.2822 -400.9932 397.249 -390.7598 395.915 -382.4932 C
394.4482 -373.2266 393.5322 -362.0273 393.165 -348.894 C
392.7988 -335.7275 395.415 -325.3608 401.0156 -317.7939 C
401.7822 -316.9609 402.5654 -316.3271 403.3652 -315.894 C
407.2314 -313.3608 410.5488 -313.9272 413.3154 -317.5942 C
416.0488 -321.2939 417.6484 -324.9438 418.1152 -328.5439 C
418.1152 -331.0439 418.2314 -335.0107 418.4648 -340.4438 C
418.665 -345.8774 419.999 -348.9609 422.4648 -349.6938 C
425.165 -349.1606 427.6982 -346.3105 430.0654 -341.144 C
432.3984 -335.9775 434.0322 -332.0771 434.9648 -329.4438 C
447.7314 -304.9438 463.5322 -302.5771 482.3652 -322.3442 C
485.9316 -327.0439 489.3984 -331.8105 492.7656 -336.644 C
498.1318 -343.3774 503.4648 -344.2939 508.7656 -339.394 C
514.0986 -334.4272 518.3818 -329.2275 521.6152 -323.7939 C
527.249 -314.5942 534.3154 -304.894 542.8154 -294.6938 C
554.1816 -281.0605 563.7656 -272.2939 571.5654 -268.394 C
572.4316 -267.9272 573.3154 -267.5107 574.2148 -267.144 C
570.0488 -267.3442 565.8652 -267.7607 561.665 -268.394 C
506.7988 -277.5605 448.9482 -278.1938 388.1152 -270.2939 C
381.0156 -269.5605 371.5488 -267.8271 359.7153 -265.0942 C
347.8486 -262.394 340.4985 -257.9438 337.665 -251.7441 C
f
380.4648 -264.644 m
391.999 -266.0439 401.7656 -267.1108 409.7656 -267.8442 C
463.1318 -272.4775 514.2822 -271.3105 563.2148 -264.3442 C
566.0488 -263.9775 570.8984 -263.7275 577.7656 -263.5942 C
555.6982 -261.394 533.7148 -260.1274 511.8154 -259.7939 C
501.7148 -259.4272 491.7822 -259.3774 482.0156 -259.644 C
452.915 -259.0439 424.082 -260.0107 395.5156 -262.5439 C
392.4814 -262.9775 387.4648 -263.6772 380.4648 -264.644 C
f
0 D
440.9648 -355.3442 m
441.0654 -355.3105 441.249 -355.2607 441.5156 -355.1938 C
443.3154 -354.1606 445.582 -354.7441 448.3154 -356.9438 C
450.9814 -359.144 452.7314 -361.8105 453.5654 -364.9434 C
455.1982 -371.1768 455.4482 -376.96 454.3154 -382.2939 C
452.1152 -390.7266 448.165 -395.627 442.4648 -396.9932 C
436.7656 -398.3271 432.6982 -394.2432 430.2656 -384.7432 C
429.499 -380.1436 430.0156 -374.6768 431.8154 -368.3438 C
433.582 -361.9766 436.6318 -357.644 440.9648 -355.3442 C
f
1 D
369.0156 -317.9941 m
369.2822 -313.3608 368.7822 -309.4438 367.5156 -306.2441 C
366.249 -303.1108 364.8154 -302.0273 363.2148 -302.9941 C
356.7817 -306.8608 352.0317 -312.6938 348.9653 -320.4941 C
345.5654 -329.1274 343.4487 -336.644 342.6152 -343.0439 C
342.582 -343.1772 342.5483 -343.3608 342.5151 -343.5942 C
344.5151 -372.0938 345.7485 -400.5771 346.2153 -429.0439 C
346.915 -464.877 346.5654 -500.9102 345.165 -537.1436 C
345.165 -539.1104 345.1821 -542.1768 345.2153 -546.3438 C
349.5151 -551.1104 354.9819 -554.877 361.6152 -557.6436 C
401.8154 -575.1768 443.1484 -583.4268 485.6152 -582.3936 C
529.1484 -581.3271 564.582 -573.71 591.915 -559.5439 C
594.3154 -558.3105 596.9482 -556.8105 599.8154 -555.0439 C
602.915 -553.1104 605.2656 -551.71 606.8652 -550.8438 C
606.0654 -532.4434 605.665 -512.7266 605.665 -491.6934 C
605.5986 -462.96 605.665 -442.5439 605.8652 -430.4434 C
606.2656 -408.0771 607.2148 -388.0605 608.7148 -370.3936 C
607.415 -367.627 606.082 -364.9102 604.7148 -362.2432 C
601.915 -356.8774 598.9482 -351.5439 595.8154 -346.2441 C
592.249 -351.0107 588.0488 -354.1108 583.2148 -355.5439 C
577.1152 -356.8105 571.6318 -355.3442 566.7656 -351.144 C
559.5986 -344.5771 555.8652 -336.3442 555.5654 -326.4438 C
555.2314 -316.5439 557.6982 -307.6606 562.9648 -299.7939 C
566.9316 -293.8608 572.5322 -290.8608 579.7656 -290.7939 C
589.499 -290.2275 596.0488 -294.6108 599.415 -303.9438 C
602.7822 -313.2441 603.9648 -321.9438 602.9648 -330.0439 C
602.8652 -330.9106 602.6982 -331.7939 602.4648 -332.6938 C
605.2656 -337.1938 607.9648 -341.7441 610.5654 -346.3442 C
610.6982 -344.5107 610.8486 -342.6772 611.0156 -340.8442 C
613.7822 -317.9438 616.1484 -294.9775 618.1152 -271.9438 C
616.3154 -272.8442 615.0488 -273.4272 614.3154 -273.6938 C
600.582 -278.894 586.5488 -282.6274 572.2148 -284.894 C
568.2148 -285.6606 562.665 -286.2441 555.5654 -286.644 C
545.3984 -297.6108 537.2988 -308.2275 531.2656 -318.4941 C
527.7656 -325.0605 522.2148 -332.5273 514.6152 -340.894 C
507.0488 -349.2607 499.3154 -350.3608 491.415 -344.1938 C
487.1152 -339.1606 482.7314 -333.2607 478.2656 -326.4941 C
473.7656 -319.7275 468.0654 -315.6606 461.165 -314.2939 C
452.832 -314.0942 446.8984 -317.644 443.3652 -324.9438 C
439.832 -332.2773 436.665 -339.0771 433.8652 -345.3442 C
430.6318 -350.8442 426.832 -354.0107 422.4648 -354.8442 C
418.0986 -355.6772 415.1152 -352.3442 413.5156 -344.8442 C
413.3818 -341.5439 413.1484 -336.644 412.8154 -330.144 C
412.6484 -326.7441 411.8818 -323.9106 410.5156 -321.644 C
409.082 -319.2773 407.6484 -318.7607 406.2148 -320.0942 C
405.5156 -320.7607 404.3154 -323.7109 402.6152 -328.9438 C
400.5488 -335.3442 399.5322 -340.9106 399.5654 -345.644 C
399.665 -356.7109 400.2148 -365.877 401.2148 -373.1436 C
402.8486 -383.5098 404.249 -395.877 405.415 -410.2432 C
405.9814 -417.6104 405.6982 -424.2939 404.5654 -430.2939 C
403.3984 -436.5605 401.332 -441.8271 398.3652 -446.0938 C
394.5322 -450.1934 390.7314 -452.8105 386.9648 -453.9434 C
383.0654 -455.1104 379.3984 -454.627 375.9648 -452.4932 C
372.6982 -450.46 369.832 -447.377 367.3652 -443.2432 C
365.2314 -439.6436 363.5156 -435.4102 362.2148 -430.5439 C
357.9819 -405.2773 358.082 -379.8604 362.5156 -354.2939 C
364.7822 -343.1938 366.9482 -331.0942 369.0156 -317.9941 C
f
442.165 -359.7939 m
438.7988 -362.3604 436.5488 -366.1768 435.415 -371.2432 C
434.8818 -374.5439 435.1318 -379.2432 436.165 -385.3438 C
437.1982 -391.4102 439.9814 -392.6768 444.5156 -389.1436 C
447.4482 -385.71 448.9316 -380.4268 448.9648 -373.2939 C
448.999 -369.8271 448.1484 -366.4766 446.415 -363.2432 C
444.7148 -360.0771 443.2988 -358.9272 442.165 -359.7939 C
f
590.0654 -320.4941 m
589.832 -320.1274 589.6318 -319.7939 589.4648 -319.4941 C
588.1318 -318.394 587.0986 -318.0439 586.3652 -318.4438 C
585.2656 -319.8442 585.665 -322.0605 587.5654 -325.0942 C
591.165 -330.2275 593.8818 -334.5273 595.7148 -337.9941 C
595.915 -338.2939 596.0986 -338.6108 596.2656 -338.9438 C
596.9648 -340.144 597.665 -341.3442 598.3652 -342.5439 C
602.3652 -349.5107 606.2656 -356.4941 610.0654 -363.4932 C
617.832 -377.96 624.2822 -393.0439 629.415 -408.7432 C
632.8154 -418.4766 635.8154 -428.377 638.415 -438.4434 C
640.8818 -447.5098 641.7988 -458.2266 641.165 -470.5938 C
641.165 -474.4932 640.4482 -477.6768 639.0156 -480.1436 C
637.3154 -482.0439 635.4482 -482.9102 633.415 -482.7432 C
631.8154 -482.6104 629.7314 -481.7266 627.165 -480.0938 C
625.1982 -478.7939 622.3154 -476.1602 618.5156 -472.1934 C
615.5488 -469.127 613.2988 -466.627 611.7656 -464.6934 C
611.6152 -469.1934 L
615.6816 -476.8604 621.3652 -482.8936 628.665 -487.2939 C
632.832 -489.1602 636.2314 -489.4434 638.8652 -488.1436 C
641.2988 -486.9434 642.9648 -484.4268 643.8652 -480.5938 C
644.3984 -478.2939 644.8652 -474.5771 645.2656 -469.4434 C
645.7656 -462.5098 645.665 -456.6436 644.9648 -451.8438 C
642.4648 -434.71 638.2656 -418.0771 632.3652 -401.9434 C
627.0654 -387.4102 619.7314 -371.6436 610.3652 -354.644 C
607.3984 -349.0107 604.249 -343.3105 600.915 -337.5439 C
600.4814 -336.8442 600.0654 -336.1772 599.665 -335.5439 C
599.3652 -335.1108 598.8818 -334.394 598.2148 -333.394 C
595.0488 -328.8271 592.332 -324.5273 590.0654 -320.4941 C
f
570.165 -308.2939 m
567.9648 -315.2607 567.332 -321.8271 568.2656 -327.9941 C
569.0986 -333.5273 571.0986 -338.1938 574.2656 -341.9941 C
577.5322 -345.9609 581.165 -347.8105 585.165 -347.5439 C
586.999 -347.4438 588.8154 -346.4775 590.6152 -344.644 C
591.3818 -343.8774 591.8652 -343.1274 592.0654 -342.394 C
592.2988 -341.5605 592.4814 -341.0605 592.6152 -340.894 C
590.915 -338.0273 589.2314 -335.1938 587.5654 -332.394 C
583.7656 -325.894 L
582.1982 -321.394 582.2656 -318.0107 583.9648 -315.7441 C
585.6982 -313.5107 588.1152 -313.6772 591.2148 -316.2441 C
592.5156 -317.3105 594.2656 -319.7109 596.4648 -323.4438 C
596.7314 -323.8105 596.9482 -324.1274 597.1152 -324.394 C
597.7148 -325.2607 598.2988 -326.1274 598.8652 -326.9941 C
599.3984 -318.894 598.415 -311.7939 595.915 -305.6938 C
593.082 -298.7275 588.9482 -295.3442 583.5156 -295.5439 C
580.2822 -295.6772 577.4814 -296.9609 575.1152 -299.394 C
573.0488 -301.5605 571.3984 -304.5273 570.165 -308.2939 C
f
569.415 -300.5439 m
563.7822 -307.0771 561.0156 -315.1938 561.1152 -324.894 c
561.2148 -334.5942 564.665 -342.2441 571.4648 -347.8442 C
572.7988 -348.8105 574.2656 -349.5439 575.8652 -350.0439 C
568.8652 -344.4438 564.999 -337.1108 564.2656 -328.0439 C
563.2988 -318.2773 565.8486 -308.4272 571.915 -298.4941 C
570.915 -299.0942 570.082 -299.7773 569.415 -300.5439 C
f
616.415 -464.7432 m
618.1152 -466.8105 620.749 -469.6602 624.3154 -473.2939 c
627.8818 -476.9268 630.999 -478.8105 633.665 -478.9434 C
635.4648 -478.4434 636.6484 -476.9268 637.2148 -474.3936 C
637.915 -463.1934 636.9814 -452.21 634.415 -441.4434 C
629.7148 -422.0098 623.2822 -402.96 615.1152 -384.2939 C
613.3154 -409.0273 612.1816 -433.8105 611.7148 -458.6436 C
613.249 -460.877 614.8154 -462.9102 616.415 -464.7432 C
f
596.2656 -570.6934 m
597.2314 -570.0938 598.9814 -569.1104 601.5156 -567.7432 C
604.8818 -565.9766 607.3652 -564.6436 608.9648 -563.7432 C
608.3652 -561.5771 607.8984 -559.2773 607.5654 -556.8438 C
579.7988 -573.4766 545.2314 -583.5605 503.8652 -587.0938 C
462.499 -590.6602 420.6152 -585.0098 378.2148 -570.1436 C
374.415 -568.8105 369.0488 -566.5605 362.1152 -563.3936 C
355.1484 -560.2598 349.4653 -556.7266 345.0654 -552.7939 C
344.9653 -554.3604 344.7817 -555.7598 344.5151 -556.9932 C
349.1152 -561.2939 354.3818 -565.1602 360.3154 -568.5938 C
375.3486 -576.5938 392.2988 -582.6768 411.165 -586.8438 C
430.0322 -591.0098 447.0156 -593.4932 462.1152 -594.2939 C
513.7148 -597.3936 558.4316 -589.5273 596.2656 -570.6934 C
f
*U
*u
0 D
0.092561 0.067353 0.072053 0 0.894118 0.894118 0.894118 (R=228 G=228 B=228) 0 1 Xk
369.915 -240.1938 m
380.0488 -238.7275 388.2988 -237.5942 394.665 -236.7939 C
420.2988 -233.894 445.5488 -232.4775 470.415 -232.5439 C
496.915 -232.3442 517.9648 -232.5942 533.5654 -233.2939 C
547.332 -233.9609 560.6816 -235.3105 573.6152 -237.3442 C
588.5156 -239.7109 601.3486 -242.7607 612.1152 -246.4941 C
618.2148 -248.6274 621.5654 -251.5605 622.165 -255.2939 C
622.7314 -258.9272 620.5986 -262.7607 615.7656 -266.7939 C
612.4316 -268.5942 608.9814 -270.1606 605.415 -271.4941 C
590.5156 -275.9272 575.6318 -279.3105 560.7656 -281.644 C
566.5654 -276.3774 572.6982 -272.3442 579.165 -269.5439 C
584.0322 -268.5771 587.415 -267.8774 589.3154 -267.4438 C
596.3818 -266.5771 604.6152 -264.2607 614.0156 -260.4941 C
615.8486 -259.2939 616.9482 -258.0107 617.3154 -256.644 C
617.415 -256.1108 617.3818 -255.5942 617.2148 -255.0942 C
617.082 -254.6938 616.8154 -254.2607 616.415 -253.7939 C
616.1816 -253.5273 615.8818 -253.2441 615.5156 -252.9438 C
615.3486 -252.7773 615.1816 -252.6274 615.0156 -252.4941 C
614.915 -252.4438 L
614.8652 -252.4438 L
612.6982 -251.5107 610.2148 -250.5942 607.415 -249.6938 C
606.8154 -249.5273 606.2656 -249.394 605.7656 -249.2939 C
602.9316 -248.5942 599.0986 -247.5107 594.2656 -246.0439 C
566.4648 -239.4438 536.7656 -236.1938 505.165 -236.2939 C
481.0986 -235.9272 459.7314 -236.1938 441.0654 -237.0942 C
414.6318 -238.394 389.4814 -241.0439 365.6152 -245.0439 C
350.582 -247.6108 343.1152 -250.6606 343.2153 -254.1938 C
339.2817 -251.1606 339.4819 -248.6606 343.8154 -246.6938 C
349.8154 -243.9941 358.5151 -241.8271 369.915 -240.1938 C
f
369.0156 -317.9941 m
366.9482 -331.0942 364.7822 -343.1938 362.5156 -354.2939 C
358.082 -379.8604 357.9819 -405.2773 362.2148 -430.5439 C
363.5156 -435.4102 365.2314 -439.6436 367.3652 -443.2432 C
369.832 -447.377 372.6982 -450.46 375.9648 -452.4932 C
379.3984 -454.627 383.0654 -455.1104 386.9648 -453.9434 C
390.7314 -452.8105 394.5322 -450.1934 398.3652 -446.0938 C
401.332 -441.8271 403.3984 -436.5605 404.5654 -430.2939 C
405.6982 -424.2939 405.9814 -417.6104 405.415 -410.2432 C
404.249 -395.877 402.8486 -383.5098 401.2148 -373.1436 C
400.2148 -365.877 399.665 -356.7109 399.5654 -345.644 C
399.5322 -340.9106 400.5488 -335.3442 402.6152 -328.9438 C
404.3154 -323.7109 405.5156 -320.7607 406.2148 -320.0942 C
407.6484 -318.7607 409.082 -319.2773 410.5156 -321.644 C
411.8818 -323.9106 412.6484 -326.7441 412.8154 -330.144 C
413.1484 -336.644 413.3818 -341.5439 413.5156 -344.8442 C
415.1152 -352.3442 418.0986 -355.6772 422.4648 -354.8442 C
426.832 -354.0107 430.6318 -350.8442 433.8652 -345.3442 C
436.665 -339.0771 439.832 -332.2773 443.3652 -324.9438 C
446.8984 -317.644 452.832 -314.0942 461.165 -314.2939 C
468.0654 -315.6606 473.7656 -319.7275 478.2656 -326.4941 C
482.7314 -333.2607 487.1152 -339.1606 491.415 -344.1938 C
499.3154 -350.3608 507.0488 -349.2607 514.6152 -340.894 C
522.2148 -332.5273 527.7656 -325.0605 531.2656 -318.4941 C
537.2988 -308.2275 545.3984 -297.6108 555.5654 -286.644 C
562.665 -286.2441 568.2148 -285.6606 572.2148 -284.894 C
586.5488 -282.6274 600.582 -278.894 614.3154 -273.6938 C
615.0488 -273.4272 616.3154 -272.8442 618.1152 -271.9438 C
616.1484 -294.9775 613.7822 -317.9438 611.0156 -340.8442 C
610.8486 -342.6772 610.6982 -344.5107 610.5654 -346.3442 C
607.9648 -341.7441 605.2656 -337.1938 602.4648 -332.6938 C
602.6982 -331.7939 602.8652 -330.9106 602.9648 -330.0439 C
603.9648 -321.9438 602.7822 -313.2441 599.415 -303.9438 C
596.0488 -294.6108 589.499 -290.2275 579.7656 -290.7939 C
572.5322 -290.8608 566.9316 -293.8608 562.9648 -299.7939 C
557.6982 -307.6606 555.2314 -316.5439 555.5654 -326.4438 C
555.8652 -336.3442 559.5986 -344.5771 566.7656 -351.144 C
571.6318 -355.3442 577.1152 -356.8105 583.2148 -355.5439 C
588.0488 -354.1108 592.249 -351.0107 595.8154 -346.2441 C
598.9482 -351.5439 601.915 -356.8774 604.7148 -362.2432 C
606.082 -364.9102 607.415 -367.627 608.7148 -370.3936 C
607.2148 -388.0605 606.2656 -408.0771 605.8652 -430.4434 C
605.665 -442.5439 605.5986 -462.96 605.665 -491.6934 C
605.665 -512.7266 606.0654 -532.4434 606.8652 -550.8438 C
605.2656 -551.71 602.915 -553.1104 599.8154 -555.0439 C
596.9482 -556.8105 594.3154 -558.3105 591.915 -559.5439 C
564.582 -573.71 529.1484 -581.3271 485.6152 -582.3936 C
443.1484 -583.4268 401.8154 -575.1768 361.6152 -557.6436 C
354.9819 -554.877 349.5151 -551.1104 345.2153 -546.3438 C
345.1821 -542.1768 345.165 -539.1104 345.165 -537.1436 C
346.5654 -500.9102 346.915 -464.877 346.2153 -429.0439 C
345.7485 -400.5771 344.5151 -372.0938 342.5151 -343.5942 C
342.5483 -343.3608 342.582 -343.1772 342.6152 -343.0439 C
343.4487 -336.644 345.5654 -329.1274 348.9653 -320.4941 C
352.0317 -312.6938 356.7817 -306.8608 363.2148 -302.9941 C
364.8154 -302.0273 366.249 -303.1108 367.5156 -306.2441 C
368.7822 -309.4438 369.2822 -313.3608 369.0156 -317.9941 C
f
1 D
440.9648 -355.3442 m
436.6318 -357.644 433.582 -361.9766 431.8154 -368.3438 C
430.0156 -374.6768 429.499 -380.1436 430.2656 -384.7432 C
432.6982 -394.2432 436.7656 -398.3271 442.4648 -396.9932 C
448.165 -395.627 452.1152 -390.7266 454.3154 -382.2939 C
455.4482 -376.96 455.1982 -371.1768 453.5654 -364.9434 C
452.7314 -361.8105 450.9814 -359.144 448.3154 -356.9438 C
445.582 -354.7441 443.3154 -354.1606 441.5156 -355.1938 C
441.249 -355.2607 441.0654 -355.3105 440.9648 -355.3442 C
f
0 D
596.2656 -570.6934 m
558.4316 -589.5273 513.7148 -597.3936 462.1152 -594.2939 C
447.0156 -593.4932 430.0322 -591.0098 411.165 -586.8438 C
392.2988 -582.6768 375.3486 -576.5938 360.3154 -568.5938 C
354.3818 -565.1602 349.1152 -561.2939 344.5151 -556.9932 C
344.7817 -555.7598 344.9653 -554.3604 345.0654 -552.7939 C
349.4653 -556.7266 355.1484 -560.2598 362.1152 -563.3936 C
369.0488 -566.5605 374.415 -568.8105 378.2148 -570.1436 C
420.6152 -585.0098 462.499 -590.6602 503.8652 -587.0938 C
545.2314 -583.5605 579.7988 -573.4766 607.5654 -556.8438 C
607.8984 -559.2773 608.3652 -561.5771 608.9648 -563.7432 C
607.3652 -564.6436 604.8818 -565.9766 601.5156 -567.7432 C
598.9814 -569.1104 597.2314 -570.0938 596.2656 -570.6934 C
f
*U
*u
0.251957 0.1991 0.204257 0 0.74902 0.74902 0.74902 (R=191 G=191 B=191) 0 1 Xk
590.0654 -320.4941 m
592.332 -324.5273 595.0488 -328.8271 598.2148 -333.394 C
598.8818 -334.394 599.3652 -335.1108 599.665 -335.5439 C
600.0654 -336.1772 600.4814 -336.8442 600.915 -337.5439 C
604.249 -343.3105 607.3984 -349.0107 610.3652 -354.644 C
619.7314 -371.6436 627.0654 -387.4102 632.3652 -401.9434 C
638.2656 -418.0771 642.4648 -434.71 644.9648 -451.8438 C
645.665 -456.6436 645.7656 -462.5098 645.2656 -469.4434 C
644.8652 -474.5771 644.3984 -478.2939 643.8652 -480.5938 C
642.9648 -484.4268 641.2988 -486.9434 638.8652 -488.1436 C
636.2314 -489.4434 632.832 -489.1602 628.665 -487.2939 C
621.3652 -482.8936 615.6816 -476.8604 611.6152 -469.1934 C
611.7656 -464.6934 L
613.2988 -466.627 615.5488 -469.127 618.5156 -472.1934 C
622.3154 -476.1602 625.1982 -478.7939 627.165 -480.0938 C
629.7314 -481.7266 631.8154 -482.6104 633.415 -482.7432 C
635.4482 -482.9102 637.3154 -482.0439 639.0156 -480.1436 C
640.4482 -477.6768 641.165 -474.4932 641.165 -470.5938 C
641.7988 -458.2266 640.8818 -447.5098 638.415 -438.4434 C
635.8154 -428.377 632.8154 -418.4766 629.415 -408.7432 C
624.2822 -393.0439 617.832 -377.96 610.0654 -363.4932 C
606.2656 -356.4941 602.3652 -349.5107 598.3652 -342.5439 C
597.665 -341.3442 596.9648 -340.144 596.2656 -338.9438 C
596.0986 -338.6108 595.915 -338.2939 595.7148 -337.9941 C
593.8818 -334.5273 591.165 -330.2275 587.5654 -325.0942 C
585.665 -322.0605 585.2656 -319.8442 586.3652 -318.4438 C
587.0986 -318.0439 588.1318 -318.394 589.4648 -319.4941 C
589.6318 -319.7939 589.832 -320.1274 590.0654 -320.4941 C
f
570.165 -308.2939 m
571.3984 -304.5273 573.0488 -301.5605 575.1152 -299.394 C
577.4814 -296.9609 580.2822 -295.6772 583.5156 -295.5439 C
588.9482 -295.3442 593.082 -298.7275 595.915 -305.6938 C
598.415 -311.7939 599.3984 -318.894 598.8652 -326.9941 C
598.2988 -326.1274 597.7148 -325.2607 597.1152 -324.394 C
596.9482 -324.1274 596.7314 -323.8105 596.4648 -323.4438 C
594.2656 -319.7109 592.5156 -317.3105 591.2148 -316.2441 C
588.1152 -313.6772 585.6982 -313.5107 583.9648 -315.7441 C
582.2656 -318.0107 582.1982 -321.394 583.7656 -325.894 C
587.5654 -332.394 L
589.2314 -335.1938 590.915 -338.0273 592.6152 -340.894 C
592.4814 -341.0605 592.2988 -341.5605 592.0654 -342.394 C
591.8652 -343.1274 591.3818 -343.8774 590.6152 -344.644 C
588.8154 -346.4775 586.999 -347.4438 585.165 -347.5439 C
581.165 -347.8105 577.5322 -345.9609 574.2656 -341.9941 C
571.0986 -338.1938 569.0986 -333.5273 568.2656 -327.9941 C
567.332 -321.8271 567.9648 -315.2607 570.165 -308.2939 C
f
*U
0.54995 0.465064 0.4607 0.115328 0.462745 0.462745 0.462745 (R=118 G=118 B=118) 0 1 Xk
569.415 -300.5439 m
570.082 -299.7773 570.915 -299.0942 571.915 -298.4941 C
565.8486 -308.4272 563.2988 -318.2773 564.2656 -328.0439 C
564.999 -337.1108 568.8652 -344.4438 575.8652 -350.0439 C
574.2656 -349.5439 572.7988 -348.8105 571.4648 -347.8442 C
564.665 -342.2441 561.2148 -334.5942 561.1152 -324.894 c
561.0156 -315.1938 563.7822 -307.0771 569.415 -300.5439 C
f
0.138735 1 1 0.04889 0.792157 0 0 (R=202 G=0 B=0) 0 1 Xk
380.4648 -264.644 m
387.4648 -263.6772 392.4814 -262.9775 395.5156 -262.5439 C
424.082 -260.0107 452.915 -259.0439 482.0156 -259.644 C
491.7822 -259.3774 501.7148 -259.4272 511.8154 -259.7939 C
533.7148 -260.1274 555.6982 -261.394 577.7656 -263.5942 C
570.8984 -263.7275 566.0488 -263.9775 563.2148 -264.3442 C
514.2822 -271.3105 463.1318 -272.4775 409.7656 -267.8442 C
401.7656 -267.1108 391.999 -266.0439 380.4648 -264.644 C
f
0 0.873075 0.719539 0 1 0.266667 0.266667 (R=255 G=68 B=68) 0 1 Xk
359.0654 -251.144 m
366.9648 -249.2441 376.5986 -247.5605 387.9648 -246.0942 C
412.5322 -242.9609 437.499 -241.0439 462.8652 -240.3442 C
485.5654 -239.7109 509.7314 -240.0439 535.3652 -241.3442 C
562.6318 -242.9106 588.2314 -247.2773 612.165 -254.4438 C
612.4316 -254.5107 612.749 -254.6108 613.1152 -254.7441 C
604.6152 -258.6772 596.3486 -261.3608 588.3154 -262.7939 C
588.1816 -262.7939 588.0322 -262.8271 587.8652 -262.894 C
582.5986 -261.2939 575.9316 -260.0771 567.8652 -259.2441 C
559.832 -258.4438 553.749 -257.9106 549.6152 -257.644 C
532.1816 -256.1772 514.8486 -255.3442 497.6152 -255.144 C
485.2822 -255.2441 472.8984 -255.3774 460.4648 -255.5439 C
430.499 -254.9106 401.3818 -257.1772 373.1152 -262.3442 C
372.2822 -262.5107 371.4648 -262.7607 370.665 -263.0942 C
366.5986 -262.4272 361.2979 -261.0439 354.7651 -258.9438 C
348.9985 -257.0771 345.9487 -255.9609 345.6152 -255.5942 C
347.8486 -254.2275 352.332 -252.7441 359.0654 -251.144 C
f
*u
0 0.993988 1 0 1 0 0 (RGB Red) 0 1 Xk
359.7153 -265.0942 m
371.5488 -267.8271 381.0156 -269.5605 388.1152 -270.2939 C
448.9482 -278.1938 506.7988 -277.5605 561.665 -268.394 C
565.8652 -267.7607 570.0488 -267.3442 574.2148 -267.144 C
573.3154 -267.5107 572.4316 -267.9272 571.5654 -268.394 C
563.7656 -272.2939 554.1816 -281.0605 542.8154 -294.6938 C
534.3154 -304.894 527.249 -314.5942 521.6152 -323.7939 C
518.3818 -329.2275 514.0986 -334.4272 508.7656 -339.394 C
503.4648 -344.2939 498.1318 -343.3774 492.7656 -336.644 C
489.3984 -331.8105 485.9316 -327.0439 482.3652 -322.3442 C
463.5322 -302.5771 447.7314 -304.9438 434.9648 -329.4438 C
434.0322 -332.0771 432.3984 -335.9775 430.0654 -341.144 C
427.6982 -346.3105 425.165 -349.1606 422.4648 -349.6938 C
419.999 -348.9609 418.665 -345.8774 418.4648 -340.4438 C
418.2314 -335.0107 418.1152 -331.0439 418.1152 -328.5439 C
417.6484 -324.9438 416.0488 -321.2939 413.3154 -317.5942 C
410.5488 -313.9272 407.2314 -313.3608 403.3652 -315.894 C
402.5654 -316.3271 401.7822 -316.9609 401.0156 -317.7939 C
395.415 -325.3608 392.7988 -335.7275 393.165 -348.894 C
393.5322 -362.0273 394.4482 -373.2266 395.915 -382.4932 C
397.249 -390.7598 398.2822 -400.9932 399.0156 -413.1934 C
399.3818 -419.7266 399.1152 -425.1934 398.2148 -429.5938 C
397.1484 -434.5938 395.1816 -438.5771 392.3154 -441.5439 C
389.1484 -444.8105 386.0654 -446.46 383.0654 -446.4932 C
380.1318 -446.4932 377.5156 -444.96 375.2148 -441.8936 C
370.6816 -435.8604 367.9482 -429.5771 367.0156 -423.0439 C
363.8486 -392.1436 365.3818 -361.6768 371.6152 -331.644 C
371.9482 -329.7441 372.249 -327.4106 372.5156 -324.644 C
373.4482 -315.8105 373.165 -308.7441 371.665 -303.4438 C
370.3984 -299.4106 367.749 -297.4941 363.7148 -297.6938 C
358.2817 -298.394 353.582 -301.9941 349.6152 -308.4941 C
345.6821 -314.9941 342.8486 -321.3774 341.1152 -327.644 C
339.915 -318.2441 338.7319 -308.8774 337.5654 -299.5439 C
335.1987 -280.9106 333.9653 -270.8105 333.8652 -269.2441 C
333.5986 -263.3442 334.4487 -258.0605 336.415 -253.394 C
336.7817 -252.8271 337.1987 -252.2773 337.665 -251.7441 C
340.4985 -257.9438 347.8486 -262.394 359.7153 -265.0942 C
f
1 D
390.2148 -382.5938 m
391.0488 -393.1602 391.415 -400.3936 391.3154 -404.2939 C
391.082 -413.9268 389.332 -421.9102 386.0654 -428.2432 C
385.0986 -429.4766 383.8818 -431.2432 382.415 -433.5439 C
380.8818 -435.877 381.6484 -437.2773 384.7148 -437.7432 C
388.4814 -437.2773 391.1816 -434.0605 392.8154 -428.0938 C
393.8818 -424.0605 394.4648 -419.2598 394.5654 -413.6934 C
394.665 -405.0605 393.7314 -394.4268 391.7656 -381.7939 C
389.7988 -370.8271 388.7988 -365.3271 388.7656 -365.2939 C
388.832 -366.5605 389.3154 -372.3271 390.2148 -382.5938 C
f
0 D
444.5156 -389.1436 m
439.9814 -392.6768 437.1982 -391.4102 436.165 -385.3438 C
435.1318 -379.2432 434.8818 -374.5439 435.415 -371.2432 C
436.5488 -366.1768 438.7988 -362.3604 442.165 -359.7939 C
443.2988 -358.9272 444.7148 -360.0771 446.415 -363.2432 C
448.1484 -366.4766 448.999 -369.8271 448.9648 -373.2939 C
448.9316 -380.4268 447.4482 -385.71 444.5156 -389.1436 C
f
1 D
537.7656 -291.9438 m
545.4316 -282.3442 549.1318 -277.4272 548.8652 -277.1938 C
546.1318 -279.9609 543.3154 -282.8105 540.415 -285.7441 C
534.6152 -291.644 531.332 -295.0273 530.5654 -295.894 C
524.5283 -303.0571 519.5537 -309.4824 515.6406 -315.1689 C
511.7334 -320.8623 507.9414 -324.5791 504.2656 -326.3188 C
500.5889 -328.0591 498.4561 -328.5508 497.8652 -327.7939 C
497.2686 -327.0308 497.0938 -327.2891 497.3398 -328.5688 C
497.5898 -329.7192 498.0488 -330.6606 498.7148 -331.394 C
499.3486 -332.0942 500.2822 -332.6772 501.5156 -333.144 C
503.8818 -334.1108 507.3154 -331.9438 511.8154 -326.644 C
515.749 -321.9775 518.5488 -318.4106 520.2148 -315.9438 C
523.0488 -311.1108 528.8984 -303.1108 537.7656 -291.9438 C
f
*U
*u
0 D
0 0 0 0 1 1 1 (White) 0 1 Xk
390.2148 -382.5938 m
389.3154 -372.3271 388.832 -366.5605 388.7656 -365.2939 C
388.7988 -365.3271 389.7988 -370.8271 391.7656 -381.7939 C
393.7314 -394.4268 394.665 -405.0605 394.5654 -413.6934 C
394.4648 -419.2598 393.8818 -424.0605 392.8154 -428.0938 C
391.1816 -434.0605 388.4814 -437.2773 384.7148 -437.7432 C
381.6484 -437.2773 380.8818 -435.877 382.415 -433.5439 C
383.8818 -431.2432 385.0986 -429.4766 386.0654 -428.2432 C
389.332 -421.9102 391.082 -413.9268 391.3154 -404.2939 C
391.415 -400.3936 391.0488 -393.1602 390.2148 -382.5938 C
f
537.7656 -291.9438 m
528.8984 -303.1108 523.0488 -311.1108 520.2148 -315.9438 C
518.5488 -318.4106 515.749 -321.9775 511.8154 -326.644 C
507.3154 -331.9438 503.8818 -334.1108 501.5156 -333.144 C
500.2822 -332.6772 499.3486 -332.0942 498.7148 -331.394 C
498.0488 -330.6606 497.5898 -329.7192 497.3398 -328.5688 C
497.0938 -327.2891 497.2686 -327.0308 497.8652 -327.7939 C
498.4561 -328.5508 500.5889 -328.0591 504.2656 -326.3188 C
507.9414 -324.5791 511.7334 -320.8623 515.6406 -315.1689 C
519.5537 -309.4824 524.5283 -303.0571 530.5654 -295.894 C
531.332 -295.0273 534.6152 -291.644 540.415 -285.7441 C
543.3154 -282.8105 546.1318 -279.9609 548.8652 -277.1938 C
549.1318 -277.4272 545.4316 -282.3442 537.7656 -291.9438 C
f
*U
U
u
0.75021 0.679683 0.670222 0.90164 0 0 0 (Black) 0 1 Xk
335.5151 -25.894 m
342.9487 -28.0605 347.5654 -32.8442 349.3652 -40.2441 C
351.0317 -47.1772 349.9487 -54.9106 346.1152 -63.4438 C
341.415 -73.7773 335.332 -83.3442 327.8652 -92.144 C
315.0654 -107.644 302.9985 -124.1108 291.665 -141.5439 C
291.3652 -142.3105 291.0483 -143.0605 290.7153 -143.7939 C
297.3486 -144.0273 303.7983 -144.6772 310.0654 -145.7441 C
322.9985 -149.144 331.7817 -157.394 336.415 -170.4941 C
336.582 -170.9941 336.7153 -171.5107 336.8154 -172.0439 C
338.582 -181.0771 337.2319 -189.4941 332.7651 -197.2939 C
331.7983 -199.7275 330.0317 -203.3608 327.4653 -208.1938 C
324.8652 -212.9941 322.0483 -215.394 319.0151 -215.394 C
313.7153 -225.394 308.4819 -235.4106 303.3154 -245.4438 C
293.915 -263.3774 285.7651 -281.644 278.8652 -300.2441 C
276.6987 -306.1108 274.3984 -312.7275 271.9653 -320.0942 C
268.0986 -333.6606 262.8154 -344.9941 256.1152 -354.0942 C
251.5483 -358.4941 247.082 -361.3604 242.7153 -362.6934 C
238.3486 -363.9932 233.1821 -364.0605 227.2153 -362.8936 C
225.0151 -362.46 222.0483 -362.3105 218.3154 -362.4434 C
214.6821 -362.6104 211.9985 -362.96 210.2651 -363.4932 C
206.5654 -364.6934 204.3818 -368.1934 203.7153 -373.9932 C
203.415 -376.5938 203.5317 -381.4434 204.0654 -388.5439 C
204.5654 -395.1768 206.2651 -403.5273 209.165 -413.5938 C
212.332 -424.5273 214.2153 -432.3105 214.8154 -436.9434 C
216.5151 -450.2432 214.7817 -459.3438 209.6152 -464.2432 C
205.8818 -467.7432 200.9321 -468.8271 194.7651 -467.4932 C
186.3984 -463.6602 181.2983 -455.1104 179.4653 -441.8438 C
177.5986 -428.5771 177.1152 -417.7773 178.0151 -409.4434 C
178.915 -402.0439 179.6318 -390.4434 180.165 -374.6436 C
180.5654 -363.1104 179.0654 -353.6274 175.665 -346.1938 C
174.4653 -343.5273 173.165 -341.4609 171.7651 -339.9941 C
170.5654 -338.7275 169.6987 -338.2607 169.165 -338.5942 C
163.0317 -342.4272 160.3154 -347.9941 161.0151 -355.2939 C
161.2817 -357.8608 161.6821 -361.4932 162.2153 -366.1934 C
162.582 -370.1602 162.7153 -373.3936 162.6152 -375.8936 C
162.4487 -379.0605 161.5151 -381.9102 159.8154 -384.4434 C
158.082 -387.0439 155.8818 -388.7939 153.2153 -389.6934 C
150.2485 -390.6934 147.7319 -390.9102 145.665 -390.3438 C
143.165 -389.71 141.1152 -387.9268 139.5151 -384.9932 C
138.2485 -381.3936 137.6484 -377.1436 137.7153 -372.2432 C
137.7485 -367.6104 138.3818 -362.96 139.6152 -358.2939 C
141.9487 -349.3271 142.6821 -340.5439 141.8154 -331.9438 C
140.8154 -327.8774 139.6484 -324.7109 138.3154 -322.4438 C
136.8818 -319.9438 134.7319 -317.5439 131.8652 -315.2441 C
126.8652 -311.2109 123.1987 -306.2773 120.8652 -300.4438 C
119.8984 -297.1772 119.7319 -293.3608 120.3652 -288.9941 C
120.7319 -285.894 121.5986 -282.6772 122.9653 -279.3442 C
123.8652 -276.8774 124.9487 -274.5771 126.2153 -272.4438 C
130.8486 -264.4775 135.1484 -258.1772 139.1152 -253.5439 C
151.7485 -236.7441 163.9819 -219.6108 175.8154 -202.144 C
177.082 -200.1772 179.2153 -196.7939 182.2153 -191.9941 C
181.2485 -191.4941 180.5654 -190.7275 180.165 -189.6938 C
178.6318 -184.4272 180.165 -178.2939 184.7651 -171.2939 C
189.3652 -164.2939 193.2651 -158.6606 196.4653 -154.394 C
197.332 -153.1606 198.2651 -152.2275 199.2651 -151.5942 C
201.2983 -149.8608 204.165 -148.5605 207.8652 -147.6938 C
208.2319 -147.5273 211.5317 -147.1108 217.7651 -146.4438 C
224.5986 -145.6772 229.2651 -145.3271 231.7651 -145.394 C
238.5654 -145.1938 245.5317 -144.894 252.665 -144.4941 C
258.332 -134.7939 263.3818 -124.9272 267.8154 -114.894 C
274.7485 -95.3271 282.2983 -75.9941 290.4653 -56.894 C
293.4321 -50.1606 298.1821 -43.0771 304.7153 -35.644 C
309.2153 -30.9438 313.9985 -27.7441 319.0654 -26.0439 C
324.3652 -24.2773 329.8486 -24.2275 335.5151 -25.894 C
f
0.004456 0.991424 0.973236 0.000946 0.929412 0.109804 0.141176 (R=237 G=28 B=36) 0 1 Xk
150.915 -259.4438 m
151.0151 -260.9106 151.3154 -262.2939 151.8154 -263.5942 C
151.915 -263.8608 152.0151 -264.0942 152.1152 -264.2939 C
152.9487 -266.0273 153.9985 -267.2607 155.2651 -267.9941 C
156.2319 -268.5605 157.2983 -268.9106 158.4653 -269.0439 C
160.832 -269.3105 163.415 -268.9272 166.2153 -267.894 C
167.8486 -267.3271 169.4819 -266.6274 171.1152 -265.7939 C
175.3154 -263.6274 179.0151 -261.3442 182.2153 -258.9438 C
184.0483 -257.644 185.5151 -256.5605 186.6152 -255.6938 C
187.4819 -255.0273 188.5151 -254.2607 189.7153 -253.394 C
200.3818 -244.4941 210.7651 -238.7939 220.8652 -236.2939 C
221.9653 -236.2939 222.8818 -236.4609 223.6152 -236.7939 C
224.582 -237.2607 225.2651 -237.9775 225.665 -238.9438 C
225.8652 -239.4106 225.9985 -239.9106 226.0654 -240.4438 C
226.0317 -240.9775 225.9653 -241.4438 225.8652 -241.8442 C
224.5317 -245.4438 222.4321 -250.1108 219.5654 -255.8442 C
216.6987 -261.5771 215.5317 -266.7109 216.0654 -271.2441 C
216.3984 -272.7109 217.1152 -273.9775 218.2153 -275.0439 C
219.5483 -276.2109 221.3154 -276.8105 223.5151 -276.8442 C
225.1821 -276.8442 226.915 -276.6274 228.7153 -276.1938 C
230.2153 -275.8271 231.665 -275.3608 233.0654 -274.7939 C
233.5986 -274.6606 234.0986 -274.5107 234.5654 -274.3442 C
235.332 -274.0771 236.0986 -273.7939 236.8652 -273.4941 C
238.1318 -272.9609 239.2153 -272.5605 240.1152 -272.2939 C
241.5483 -271.894 242.6318 -271.8271 243.3652 -272.0942 C
243.9321 -272.3608 244.3984 -272.7939 244.7651 -273.394 C
244.9321 -274.0942 245.0986 -274.7607 245.2651 -275.394 C
245.5317 -276.4609 245.6821 -277.2607 245.7153 -277.7939 C
245.2485 -284.3271 243.4653 -291.2607 240.3652 -298.5942 C
237.2651 -305.9272 236.0317 -312.6274 236.665 -318.6938 C
236.8652 -319.6606 237.1152 -320.4941 237.415 -321.1938 C
238.1821 -322.894 239.2153 -324.0107 240.5151 -324.5439 C
241.082 -324.7441 241.6821 -324.8608 242.3154 -324.894 C
243.8818 -324.9609 245.582 -324.5942 247.415 -323.7939 C
249.082 -323.0605 250.7485 -322.1274 252.415 -320.9941 C
254.915 -319.2607 257.2153 -317.4272 259.3154 -315.4941 C
261.7817 -313.2607 263.5654 -311.4941 264.665 -310.1938 C
267.1318 -307.394 269.6987 -304.3608 272.3652 -301.0942 C
269.1318 -309.8271 265.8984 -318.5942 262.665 -327.394 C
259.2319 -338.1274 254.165 -346.2109 247.4653 -351.644 C
244.7983 -353.8105 239.7153 -354.9775 232.2153 -355.144 C
229.7485 -355.2109 224.082 -355.0107 215.2153 -354.5439 C
214.0151 -354.5439 212.2651 -354.9775 209.9653 -355.8442 C
206.4985 -357.144 203.915 -359.0107 202.2153 -361.4434 C
197.082 -373.2432 195.832 -385.5605 198.4653 -398.3936 C
199.4653 -403.2266 201.0151 -409.4932 203.1152 -417.1934 C
205.582 -426.2266 207.165 -432.2266 207.8652 -435.1934 C
210.0654 -444.46 209.5654 -451.5771 206.3652 -456.5439 C
203.6987 -460.6768 200.3652 -462.2432 196.3652 -461.2432 C
190.7651 -458.0098 187.2319 -450.9434 185.7651 -440.0439 C
184.2651 -429.1768 183.7319 -420.6602 184.165 -414.4932 C
185.1318 -403.9932 185.8984 -390.7432 186.4653 -374.7432 C
187.0654 -358.7773 184.165 -346.7109 177.7651 -338.5439 C
175.4653 -336.1108 173.082 -334.5942 170.6152 -333.9941 C
166.1484 -332.8608 162.415 -335.1938 159.415 -340.9941 C
157.6484 -344.4272 156.582 -347.7275 156.2153 -350.894 C
155.9487 -353.3608 156.0654 -356.6274 156.5654 -360.6934 C
157.0654 -364.7598 157.2983 -367.9434 157.2651 -370.2432 C
157.165 -373.6436 156.582 -376.71 155.5151 -379.4434 C
154.8154 -381.2773 153.7983 -382.5938 152.4653 -383.3936 C
151.1987 -384.1602 149.915 -384.3438 148.6152 -383.9434 C
145.5151 -382.9434 144.1318 -379.8438 144.4653 -374.6436 C
145.2983 -365.2432 145.915 -358.0942 146.3154 -353.1938 C
147.0151 -344.394 147.1152 -336.9438 146.6152 -330.8442 C
146.2817 -326.8105 144.8154 -322.7939 142.2153 -318.7939 C
139.6821 -314.9272 136.1987 -311.2441 131.7651 -307.7441 C
128.3652 -305.0771 126.2817 -301.4106 125.5151 -296.7441 C
124.915 -293.2773 125.0483 -290.1606 125.915 -287.394 C
128.2485 -279.9272 132.0151 -272.3608 137.2153 -264.6938 C
141.3818 -258.5605 146.8984 -251.7773 153.7651 -244.3442 C
151.665 -249.7773 150.7153 -254.8105 150.915 -259.4438 C
f
*u
0.018952 0 0.488899 0 1 0.968627 0.6 (R=255 G=247 B=153) 0 1 Xk
314.6152 -210.9941 m
313.1484 -213.1606 307.2651 -224.7939 296.9653 -245.894 C
286.2983 -267.6938 279.8486 -281.4775 277.6152 -287.2441 C
274.2485 -291.2109 271.9321 -294.1938 270.665 -296.1938 C
269.665 -297.4609 268.5317 -298.894 267.2651 -300.4941 C
264.3652 -304.2607 260.9653 -308.0439 257.0654 -311.8442 C
255.2983 -313.5107 253.4985 -315.0107 251.665 -316.3442 C
249.3984 -317.9438 247.1821 -319.0439 245.0151 -319.644 C
244.8154 -319.7109 244.5986 -319.7607 244.3652 -319.7939 C
243.9653 -319.8608 243.5986 -319.8774 243.2651 -319.8442 C
241.5317 -319.3105 240.8818 -317.3608 241.3154 -313.9941 C
242.3486 -307.7607 243.4487 -303.2441 244.6152 -300.4438 C
245.9819 -296.9775 247.4487 -292.0273 249.0151 -285.5942 C
253.082 -280.1938 256.1821 -275.3608 258.3154 -271.0942 C
273.8818 -246.2275 288.2485 -220.3442 301.415 -193.4438 C
303.3818 -196.2109 305.7817 -199.4775 308.6152 -203.2441 C
311.4819 -207.0771 313.4819 -209.6606 314.6152 -210.9941 C
f
189.7153 -188.2441 m
197.9819 -187.7773 216.0654 -188.0107 243.9653 -188.9438 C
263.2319 -189.6108 280.665 -190.3442 296.2651 -191.144 C
285.2983 -211.4775 274.1821 -231.5942 262.915 -251.4941 C
258.915 -258.0273 254.6821 -265.6108 250.2153 -274.2441 C
249.7817 -272.5107 249.2319 -271.1108 248.5654 -270.0439 C
247.8652 -268.8774 247.082 -268.0439 246.2153 -267.5439 C
245.3486 -267.0107 244.415 -266.7275 243.415 -266.6938 C
241.8818 -266.6274 240.2485 -266.894 238.5151 -267.4941 C
236.5483 -268.1938 234.5654 -268.894 232.5654 -269.5942 C
230.6318 -270.3271 228.7983 -270.7109 227.0654 -270.7441 C
226.5317 -270.7441 226.0317 -270.6938 225.5654 -270.5942 C
223.3984 -269.9272 222.665 -268.144 223.3652 -265.2441 C
225.7319 -258.5107 227.9487 -253.1606 230.0151 -249.1938 C
230.4819 -247.4609 230.7651 -245.8105 230.8652 -244.2441 C
231.0654 -240.2441 230.0654 -237.1938 227.8652 -235.0942 C
227.165 -234.394 226.3486 -233.8442 225.415 -233.4438 C
222.2485 -231.9438 218.1318 -232.144 213.0654 -234.0439 C
207.1318 -236.5771 201.5986 -239.7607 196.4653 -243.5942 C
193.5986 -245.6938 190.7319 -247.8271 187.8652 -249.9941 C
184.3984 -252.6938 180.8818 -255.2441 177.3154 -257.644 C
174.9487 -259.2441 172.4985 -260.6938 169.9653 -261.9941 C
168.5654 -262.7275 167.1318 -263.4106 165.665 -264.0439 C
163.7319 -264.8105 162.0654 -265.2607 160.665 -265.394 C
159.1987 -265.5605 158.0151 -265.394 157.1152 -264.894 C
155.7153 -264.1606 154.8154 -262.9106 154.415 -261.144 C
153.9819 -258.8774 154.0654 -256.1606 154.665 -252.9941 C
156.5986 -244.8271 158.6152 -238.644 160.7153 -234.4438 C
161.0483 -233.8442 165.8652 -226.0942 175.165 -211.1938 C
184.7319 -195.894 189.582 -188.2441 189.7153 -188.2441 C
f
*U
*u
0.315953 0.491829 0.739315 0.098909 0.65098 0.486275 0.321569 (R=166 G=124 B=82) 0 1 Xk
339.2651 -35.394 m
339.4653 -35.6606 339.6484 -35.9272 339.8154 -36.1938 C
340.582 -37.394 341.1821 -38.644 341.6152 -39.9438 C
343.7485 -48.8774 341.7485 -58.5273 335.6152 -68.894 C
329.4819 -79.2607 323.7319 -87.5942 318.3652 -93.894 C
317.7651 -94.6606 317.1318 -95.4609 316.4653 -96.2939 C
308.3984 -105.6606 300.5317 -115.7441 292.8652 -126.5439 C
289.5986 -131.4106 286.8984 -136.3442 284.7651 -141.3442 C
284.3984 -142.2109 284.1821 -142.9609 284.1152 -143.5942 C
282.5151 -143.5942 280.8984 -143.5942 279.2651 -143.5942 c
278.6318 -143.5942 277.9985 -143.5942 277.3652 -143.5942 c
276.7651 -143.5942 276.1484 -143.6108 275.5151 -143.644 C
274.4487 -143.6772 273.3818 -143.6938 272.3154 -143.6938 C
270.2485 -143.7607 268.1987 -143.8271 266.165 -143.894 C
265.0986 -143.9272 264.0483 -143.9609 263.0151 -143.9941 C
261.7817 -144.0605 260.5654 -144.1108 259.3652 -144.144 C
271.6987 -122.2773 281.2485 -99.4272 288.0151 -75.5942 C
289.2817 -71.8608 291.0317 -67.644 293.2651 -62.9438 C
296.2651 -56.5439 300.0151 -50.4438 304.5151 -44.644 C
307.7485 -40.5107 311.3154 -37.1606 315.2153 -34.5942 C
317.0483 -33.7607 318.6152 -33.0771 319.915 -32.5439 C
320.7153 -32.1772 321.3486 -31.9438 321.8154 -31.8442 C
323.3154 -31.4438 324.7485 -31.1772 326.1152 -31.0439 C
332.1484 -30.5771 336.5317 -32.0273 339.2651 -35.394 C
f
1 D
322.8154 -63.644 m
323.1821 -62.7773 323.8486 -60.7607 324.8154 -57.5942 C
325.582 -55.0273 325.6821 -52.7275 325.1152 -50.6938 C
324.582 -48.6938 323.4819 -47.1772 321.8154 -46.144 C
317.915 -45.4106 314.2817 -47.3442 310.915 -51.9438 C
308.0483 -55.8105 306.0151 -59.4272 304.8154 -62.7939 C
304.3154 -64.2939 L
302.7485 -71.5273 303.5654 -75.5439 306.7651 -76.3442 C
309.9321 -77.144 314.1484 -74.5942 319.415 -68.6938 C
320.9487 -66.9941 322.082 -65.3105 322.8154 -63.644 C
f
*U
*u
0.75021 0.679683 0.670222 0.90164 0 0 0 (Black) 0 1 Xk
341.6152 -39.9438 m
341.1821 -38.644 340.582 -37.394 339.8154 -36.1938 C
339.6484 -35.9272 339.4653 -35.6606 339.2651 -35.394 C
336.5317 -32.0273 332.1484 -30.5771 326.1152 -31.0439 C
324.7485 -31.1772 323.3154 -31.4438 321.8154 -31.8442 C
321.3486 -31.9438 320.7153 -32.1772 319.915 -32.5439 C
318.6152 -33.0771 317.0483 -33.7607 315.2153 -34.5942 C
311.3154 -37.1606 307.7485 -40.5107 304.5151 -44.644 C
300.0151 -50.4438 296.2651 -56.5439 293.2651 -62.9438 C
291.0317 -67.644 289.2817 -71.8608 288.0151 -75.5942 C
281.2485 -99.4272 271.6987 -122.2773 259.3652 -144.144 C
260.5654 -144.1108 261.7817 -144.0605 263.0151 -143.9941 C
264.0483 -143.9609 265.0986 -143.9272 266.165 -143.894 C
268.1987 -143.8271 270.2485 -143.7607 272.3154 -143.6938 C
273.3818 -143.6938 274.4487 -143.6772 275.5151 -143.644 C
276.1484 -143.6108 276.7651 -143.5942 277.3652 -143.5942 c
277.9985 -143.5942 278.6318 -143.5942 279.2651 -143.5942 c
280.8984 -143.5942 282.5151 -143.5942 284.1152 -143.5942 C
284.1821 -142.9609 284.3984 -142.2109 284.7651 -141.3442 C
286.8984 -136.3442 289.5986 -131.4106 292.8652 -126.5439 C
300.5317 -115.7441 308.3984 -105.6606 316.4653 -96.2939 C
317.1318 -95.4609 317.7651 -94.6606 318.3652 -93.894 C
323.7319 -87.5942 329.4819 -79.2607 335.6152 -68.894 C
341.7485 -58.5273 343.7485 -48.8774 341.6152 -39.9438 C
f
0 D
335.5151 -25.894 m
342.9487 -28.0605 347.5654 -32.8442 349.3652 -40.2441 C
351.0317 -47.1772 349.9487 -54.9106 346.1152 -63.4438 C
341.415 -73.7773 335.332 -83.3442 327.8652 -92.144 C
315.0654 -107.644 302.9985 -124.1108 291.665 -141.5439 C
291.3652 -142.3105 291.0483 -143.0605 290.7153 -143.7939 C
297.3486 -144.0273 303.7983 -144.6772 310.0654 -145.7441 C
322.9985 -149.144 331.7817 -157.394 336.415 -170.4941 C
336.582 -170.9941 336.7153 -171.5107 336.8154 -172.0439 C
338.582 -181.0771 337.2319 -189.4941 332.7651 -197.2939 C
331.7983 -199.7275 330.0317 -203.3608 327.4653 -208.1938 C
324.8652 -212.9941 322.0483 -215.394 319.0151 -215.394 C
313.7153 -225.394 308.4819 -235.4106 303.3154 -245.4438 C
293.915 -263.3774 285.7651 -281.644 278.8652 -300.2441 C
276.6987 -306.1108 274.3984 -312.7275 271.9653 -320.0942 C
268.0986 -333.6606 262.8154 -344.9941 256.1152 -354.0942 C
251.5483 -358.4941 247.082 -361.3604 242.7153 -362.6934 C
238.3486 -363.9932 233.1821 -364.0605 227.2153 -362.8936 C
225.0151 -362.46 222.0483 -362.3105 218.3154 -362.4434 C
214.6821 -362.6104 211.9985 -362.96 210.2651 -363.4932 C
206.5654 -364.6934 204.3818 -368.1934 203.7153 -373.9932 C
203.415 -376.5938 203.5317 -381.4434 204.0654 -388.5439 C
204.5654 -395.1768 206.2651 -403.5273 209.165 -413.5938 C
212.332 -424.5273 214.2153 -432.3105 214.8154 -436.9434 C
216.5151 -450.2432 214.7817 -459.3438 209.6152 -464.2432 C
205.8818 -467.7432 200.9321 -468.8271 194.7651 -467.4932 C
186.3984 -463.6602 181.2983 -455.1104 179.4653 -441.8438 C
177.5986 -428.5771 177.1152 -417.7773 178.0151 -409.4434 C
178.915 -402.0439 179.6318 -390.4434 180.165 -374.6436 C
180.5654 -363.1104 179.0654 -353.6274 175.665 -346.1938 C
174.4653 -343.5273 173.165 -341.4609 171.7651 -339.9941 C
170.5654 -338.7275 169.6987 -338.2607 169.165 -338.5942 C
163.0317 -342.4272 160.3154 -347.9941 161.0151 -355.2939 C
161.2817 -357.8608 161.6821 -361.4932 162.2153 -366.1934 C
162.582 -370.1602 162.7153 -373.3936 162.6152 -375.8936 C
162.4487 -379.0605 161.5151 -381.9102 159.8154 -384.4434 C
158.082 -387.0439 155.8818 -388.7939 153.2153 -389.6934 C
150.2485 -390.6934 147.7319 -390.9102 145.665 -390.3438 C
143.165 -389.71 141.1152 -387.9268 139.5151 -384.9932 C
138.2485 -381.3936 137.6484 -377.1436 137.7153 -372.2432 C
137.7485 -367.6104 138.3818 -362.96 139.6152 -358.2939 C
141.9487 -349.3271 142.6821 -340.5439 141.8154 -331.9438 C
140.8154 -327.8774 139.6484 -324.7109 138.3154 -322.4438 C
136.8818 -319.9438 134.7319 -317.5439 131.8652 -315.2441 C
126.8652 -311.2109 123.1987 -306.2773 120.8652 -300.4438 C
119.8984 -297.1772 119.7319 -293.3608 120.3652 -288.9941 C
120.7319 -285.894 121.5986 -282.6772 122.9653 -279.3442 C
123.8652 -276.8774 124.9487 -274.5771 126.2153 -272.4438 C
130.8486 -264.4775 135.1484 -258.1772 139.1152 -253.5439 C
151.7485 -236.7441 163.9819 -219.6108 175.8154 -202.144 C
177.082 -200.1772 179.2153 -196.7939 182.2153 -191.9941 C
181.2485 -191.4941 180.5654 -190.7275 180.165 -189.6938 C
178.6318 -184.4272 180.165 -178.2939 184.7651 -171.2939 C
189.3652 -164.2939 193.2651 -158.6606 196.4653 -154.394 C
197.332 -153.1606 198.2651 -152.2275 199.2651 -151.5942 C
201.2983 -149.8608 204.165 -148.5605 207.8652 -147.6938 C
208.2319 -147.5273 211.5317 -147.1108 217.7651 -146.4438 C
224.5986 -145.6772 229.2651 -145.3271 231.7651 -145.394 C
238.5654 -145.1938 245.5317 -144.894 252.665 -144.4941 C
258.332 -134.7939 263.3818 -124.9272 267.8154 -114.894 C
274.7485 -95.3271 282.2983 -75.9941 290.4653 -56.894 C
293.4321 -50.1606 298.1821 -43.0771 304.7153 -35.644 C
309.2153 -30.9438 313.9985 -27.7441 319.0654 -26.0439 C
324.3652 -24.2773 329.8486 -24.2275 335.5151 -25.894 C
f
1 D
326.8154 -196.5439 m
328.7153 -191.9106 330.082 -187.9609 330.915 -184.6938 C
332.082 -179.9609 332.2983 -176.0942 331.5654 -173.0942 C
330.5654 -168.9941 328.4653 -165.1772 325.2651 -161.644 C
322.6987 -158.8442 319.2651 -156.0771 314.9653 -153.3442 C
315.3984 -159.3105 313.6318 -166.6606 309.665 -175.394 C
315.9321 -181.6938 321.6484 -188.7441 326.8154 -196.5439 C
f
0 D
324.8154 -57.5942 m
323.8486 -60.7607 323.1821 -62.7773 322.8154 -63.644 C
322.082 -65.3105 320.9487 -66.9941 319.415 -68.6938 C
314.1484 -74.5942 309.9321 -77.144 306.7651 -76.3442 C
303.5654 -75.5439 302.7485 -71.5273 304.3154 -64.2939 C
304.8154 -62.7939 L
306.0151 -59.4272 308.0483 -55.8105 310.915 -51.9438 C
314.2817 -47.3442 317.915 -45.4106 321.8154 -46.144 C
323.4819 -47.1772 324.582 -48.6938 325.1152 -50.6938 C
325.6821 -52.7275 325.582 -55.0273 324.8154 -57.5942 C
f
1 D
320.2651 -54.4438 m
320.4321 -53.0439 320.332 -51.6772 319.9653 -50.3442 C
312.4321 -54.3442 308.2485 -60.5439 307.415 -68.9438 C
307.6152 -72.5771 308.8818 -73.2939 311.2153 -71.0942 C
310.2485 -69.2607 310.8984 -66.1938 313.165 -61.894 C
315.4653 -57.5605 317.832 -55.0771 320.2651 -54.4438 C
f
192.3652 -170.9941 m
195.0654 -170.1606 201.7319 -169.6108 212.3652 -169.3442 C
222.1987 -169.0439 231.0986 -169.0771 239.0654 -169.4438 C
260.8652 -168.9438 282.4819 -169.7773 303.915 -171.9438 C
304.8154 -172.1108 305.5986 -172.3271 306.2651 -172.5942 C
308.5986 -167.4941 310.2651 -162.0273 311.2651 -156.1938 C
311.3652 -155.3271 311.4321 -154.0107 311.4653 -152.2441 C
304.5654 -151.0439 296.5151 -150.3271 287.3154 -150.0942 C
283.9819 -150.0273 275.9321 -150.0273 263.165 -150.0942 C
253.2319 -150.1606 242.1152 -150.6274 229.8154 -151.4941 C
216.7153 -152.4272 207.8486 -153.4609 203.2153 -154.5942 C
202.7153 -154.7275 201.1821 -156.8608 198.6152 -160.9941 C
194.9487 -166.9609 192.8652 -170.2939 192.3652 -170.9941 C
f
238.5151 -267.4941 m
240.2485 -266.894 241.8818 -266.6274 243.415 -266.6938 C
244.415 -266.7275 245.3486 -267.0107 246.2153 -267.5439 C
247.082 -268.0439 247.8652 -268.8774 248.5654 -270.0439 C
249.2319 -271.1108 249.7817 -272.5107 250.2153 -274.2441 C
254.6821 -265.6108 258.915 -258.0273 262.915 -251.4941 C
274.1821 -231.5942 285.2983 -211.4775 296.2651 -191.144 C
280.665 -190.3442 263.2319 -189.6108 243.9653 -188.9438 C
216.0654 -188.0107 197.9819 -187.7773 189.7153 -188.2441 C
189.582 -188.2441 184.7319 -195.894 175.165 -211.1938 C
165.8652 -226.0942 161.0483 -233.8442 160.7153 -234.4438 C
158.6152 -238.644 156.5986 -244.8271 154.665 -252.9941 C
154.0654 -256.1606 153.9819 -258.8774 154.415 -261.144 C
154.8154 -262.9106 155.7153 -264.1606 157.1152 -264.894 C
158.0151 -265.394 159.1987 -265.5605 160.665 -265.394 C
162.0654 -265.2607 163.7319 -264.8105 165.665 -264.0439 C
167.1318 -263.4106 168.5654 -262.7275 169.9653 -261.9941 C
172.4985 -260.6938 174.9487 -259.2441 177.3154 -257.644 C
180.8818 -255.2441 184.3984 -252.6938 187.8652 -249.9941 C
190.7319 -247.8271 193.5986 -245.6938 196.4653 -243.5942 C
201.5986 -239.7607 207.1318 -236.5771 213.0654 -234.0439 C
218.1318 -232.144 222.2485 -231.9438 225.415 -233.4438 C
226.3486 -233.8442 227.165 -234.394 227.8652 -235.0942 C
230.0654 -237.1938 231.0654 -240.2441 230.8652 -244.2441 C
230.7651 -245.8105 230.4819 -247.4609 230.0151 -249.1938 C
227.9487 -253.1606 225.7319 -258.5107 223.3652 -265.2441 C
222.665 -268.144 223.3984 -269.9272 225.5654 -270.5942 C
226.0317 -270.6938 226.5317 -270.7441 227.0654 -270.7441 C
228.7983 -270.7109 230.6318 -270.3271 232.5654 -269.5942 C
234.5654 -268.894 236.5483 -268.1938 238.5151 -267.4941 C
f
189.3154 -175.9941 m
186.7153 -180.4272 185.3652 -183.1108 185.2651 -184.0439 C
185.832 -183.8774 191.6318 -183.5771 202.665 -183.144 C
215.0654 -182.6772 224.8818 -182.5107 232.1152 -182.644 C
240.9819 -182.8105 251.9321 -183.2109 264.9653 -183.8442 C
272.2651 -184.2109 283.165 -184.7441 297.665 -185.4438 C
298.1987 -185.4775 298.6987 -185.5273 299.165 -185.5942 C
300.6987 -182.8271 302.332 -179.9609 304.0654 -176.9941 C
294.6987 -175.7275 285.2983 -174.9941 275.8652 -174.7939 C
259.9321 -174.2607 244.0317 -173.9941 228.165 -173.9941 C
216.0986 -173.5942 204.2485 -173.9438 192.6152 -175.0439 C
191.8818 -175.2441 190.7817 -175.5605 189.3154 -175.9941 C
f
306.2153 -183.9438 m
304.9487 -186.2109 304.2319 -187.5439 304.0654 -187.9438 C
305.832 -189.5771 308.5483 -192.7773 312.2153 -197.5439 C
315.7485 -202.144 318.3818 -205.8774 320.1152 -208.7441 C
321.6152 -206.7773 323.0654 -204.3608 324.4653 -201.4941 C
313.8652 -187.0273 308.5317 -179.7441 308.4653 -179.644 C
308.1987 -180.2773 307.4487 -181.7109 306.2153 -183.9438 C
f
151.8154 -263.5942 m
151.3154 -262.2939 151.0151 -260.9106 150.915 -259.4438 C
150.7153 -254.8105 151.665 -249.7773 153.7651 -244.3442 C
146.8984 -251.7773 141.3818 -258.5605 137.2153 -264.6938 C
132.0151 -272.3608 128.2485 -279.9272 125.915 -287.394 C
125.0483 -290.1606 124.915 -293.2773 125.5151 -296.7441 C
126.2817 -301.4106 128.3652 -305.0771 131.7651 -307.7441 C
136.1987 -311.2441 139.6821 -314.9272 142.2153 -318.7939 C
144.8154 -322.7939 146.2817 -326.8105 146.6152 -330.8442 C
147.1152 -336.9438 147.0151 -344.394 146.3154 -353.1938 C
145.915 -358.0942 145.2983 -365.2432 144.4653 -374.6436 C
144.1318 -379.8438 145.5151 -382.9434 148.6152 -383.9434 C
149.915 -384.3438 151.1987 -384.1602 152.4653 -383.3936 C
153.7983 -382.5938 154.8154 -381.2773 155.5151 -379.4434 C
156.582 -376.71 157.165 -373.6436 157.2651 -370.2432 C
157.2983 -367.9434 157.0654 -364.7598 156.5654 -360.6934 C
156.0654 -356.6274 155.9487 -353.3608 156.2153 -350.894 C
156.582 -347.7275 157.6484 -344.4272 159.415 -340.9941 C
162.415 -335.1938 166.1484 -332.8608 170.6152 -333.9941 C
173.082 -334.5942 175.4653 -336.1108 177.7651 -338.5439 C
184.165 -346.7109 187.0654 -358.7773 186.4653 -374.7432 C
185.8984 -390.7432 185.1318 -403.9932 184.165 -414.4932 C
183.7319 -420.6602 184.2651 -429.1768 185.7651 -440.0439 C
187.2319 -450.9434 190.7651 -458.0098 196.3652 -461.2432 C
200.3652 -462.2432 203.6987 -460.6768 206.3652 -456.5439 C
209.5654 -451.5771 210.0654 -444.46 207.8652 -435.1934 C
207.165 -432.2266 205.582 -426.2266 203.1152 -417.1934 C
201.0151 -409.4932 199.4653 -403.2266 198.4653 -398.3936 C
195.832 -385.5605 197.082 -373.2432 202.2153 -361.4434 C
203.915 -359.0107 206.4985 -357.144 209.9653 -355.8442 C
212.2651 -354.9775 214.0151 -354.5439 215.2153 -354.5439 C
224.082 -355.0107 229.7485 -355.2109 232.2153 -355.144 C
239.7153 -354.9775 244.7983 -353.8105 247.4653 -351.644 C
254.165 -346.2109 259.2319 -338.1274 262.665 -327.394 C
265.8984 -318.5942 269.1318 -309.8271 272.3652 -301.0942 C
269.6987 -304.3608 267.1318 -307.394 264.665 -310.1938 C
263.5654 -311.4941 261.7817 -313.2607 259.3154 -315.4941 C
257.2153 -317.4272 254.915 -319.2607 252.415 -320.9941 C
250.7485 -322.1274 249.082 -323.0605 247.415 -323.7939 C
245.582 -324.5942 243.8818 -324.9609 242.3154 -324.894 C
241.6821 -324.8608 241.082 -324.7441 240.5151 -324.5439 C
239.2153 -324.0107 238.1821 -322.894 237.415 -321.1938 C
237.1152 -320.4941 236.8652 -319.6606 236.665 -318.6938 C
236.0317 -312.6274 237.2651 -305.9272 240.3652 -298.5942 C
243.4653 -291.2607 245.2485 -284.3271 245.7153 -277.7939 C
245.6821 -277.2607 245.5317 -276.4609 245.2651 -275.394 C
245.0986 -274.7607 244.9321 -274.0942 244.7651 -273.394 C
244.3984 -272.7939 243.9321 -272.3608 243.3652 -272.0942 C
242.6318 -271.8271 241.5483 -271.894 240.1152 -272.2939 C
239.2153 -272.5605 238.1318 -272.9609 236.8652 -273.4941 C
236.0986 -273.7939 235.332 -274.0771 234.5654 -274.3442 C
234.0986 -274.5107 233.5986 -274.6606 233.0654 -274.7939 C
231.665 -275.3608 230.2153 -275.8271 228.7153 -276.1938 C
226.915 -276.6274 225.1821 -276.8442 223.5151 -276.8442 C
221.3154 -276.8105 219.5483 -276.2109 218.2153 -275.0439 C
217.1152 -273.9775 216.3984 -272.7109 216.0654 -271.2441 C
215.5317 -266.7109 216.6987 -261.5771 219.5654 -255.8442 C
222.4321 -250.1108 224.5317 -245.4438 225.8652 -241.8442 C
225.9653 -241.4438 226.0317 -240.9775 226.0654 -240.4438 C
225.9985 -239.9106 225.8652 -239.4106 225.665 -238.9438 C
225.2651 -237.9775 224.582 -237.2607 223.6152 -236.7939 C
222.8818 -236.4609 221.9653 -236.2939 220.8652 -236.2939 C
210.7651 -238.7939 200.3818 -244.4941 189.7153 -253.394 C
188.5151 -254.2607 187.4819 -255.0273 186.6152 -255.6938 C
185.5151 -256.5605 184.0483 -257.644 182.2153 -258.9438 C
179.0151 -261.3442 175.3154 -263.6274 171.1152 -265.7939 C
169.4819 -266.6274 167.8486 -267.3271 166.2153 -267.894 C
163.415 -268.9272 160.832 -269.3105 158.4653 -269.0439 C
157.2983 -268.9106 156.2319 -268.5605 155.2651 -267.9941 C
153.9985 -267.2607 152.9487 -266.0273 152.1152 -264.2939 C
152.0151 -264.0942 151.915 -263.8608 151.8154 -263.5942 C
f
267.2651 -300.4941 m
268.5317 -298.894 269.665 -297.4609 270.665 -296.1938 C
271.9321 -294.1938 274.2485 -291.2109 277.6152 -287.2441 C
279.8486 -281.4775 286.2983 -267.6938 296.9653 -245.894 C
307.2651 -224.7939 313.1484 -213.1606 314.6152 -210.9941 C
313.4819 -209.6606 311.4819 -207.0771 308.6152 -203.2441 C
305.7817 -199.4775 303.3818 -196.2109 301.415 -193.4438 C
288.2485 -220.3442 273.8818 -246.2275 258.3154 -271.0942 C
256.1821 -275.3608 253.082 -280.1938 249.0151 -285.5942 C
247.4487 -292.0273 245.9819 -296.9775 244.6152 -300.4438 C
243.4487 -303.2441 242.3486 -307.7607 241.3154 -313.9941 C
240.8818 -317.3608 241.5317 -319.3105 243.2651 -319.8442 C
243.5986 -319.8774 243.9653 -319.8608 244.3652 -319.7939 C
244.5986 -319.7607 244.8154 -319.7109 245.0151 -319.644 C
247.1821 -319.0439 249.3984 -317.9438 251.665 -316.3442 C
253.4985 -315.0107 255.2983 -313.5107 257.0654 -311.8442 C
260.9653 -308.0439 264.3652 -304.2607 267.2651 -300.4941 C
f
*U
*u
0 D
0.418494 0.340734 0.345922 0.008057 0.607843 0.607843 0.607843 (R=155 G=155 B=155) 0 1 Xk
326.8154 -196.5439 m
321.6484 -188.7441 315.9321 -181.6938 309.665 -175.394 C
313.6318 -166.6606 315.3984 -159.3105 314.9653 -153.3442 C
319.2651 -156.0771 322.6987 -158.8442 325.2651 -161.644 C
328.4653 -165.1772 330.5654 -168.9941 331.5654 -173.0942 C
332.2983 -176.0942 332.082 -179.9609 330.915 -184.6938 C
330.082 -187.9609 328.7153 -191.9106 326.8154 -196.5439 C
f
306.2153 -183.9438 m
307.4487 -181.7109 308.1987 -180.2773 308.4653 -179.644 C
308.5317 -179.7441 313.8652 -187.0273 324.4653 -201.4941 C
323.0654 -204.3608 321.6152 -206.7773 320.1152 -208.7441 C
318.3818 -205.8774 315.7485 -202.144 312.2153 -197.5439 C
308.5483 -192.7773 305.832 -189.5771 304.0654 -187.9438 C
304.2319 -187.5439 304.9487 -186.2109 306.2153 -183.9438 C
f
*U
0.362341 0.574029 0.840574 0.226169 0.54902 0.384314 0.223529 (R=140 G=98 B=57) 0 1 Xk
320.2651 -54.4438 m
317.832 -55.0771 315.4653 -57.5605 313.165 -61.894 C
310.8984 -66.1938 310.2485 -69.2607 311.2153 -71.0942 C
308.8818 -73.2939 307.6152 -72.5771 307.415 -68.9438 C
308.2485 -60.5439 312.4321 -54.3442 319.9653 -50.3442 C
320.332 -51.6772 320.4321 -53.0439 320.2651 -54.4438 C
f
*u
0.198367 0.154147 0.159182 0 0.796078 0.796078 0.796078 (R=203 G=203 B=203) 0 1 Xk
192.3652 -170.9941 m
192.8652 -170.2939 194.9487 -166.9609 198.6152 -160.9941 C
201.1821 -156.8608 202.7153 -154.7275 203.2153 -154.5942 C
207.8486 -153.4609 216.7153 -152.4272 229.8154 -151.4941 C
242.1152 -150.6274 253.2319 -150.1606 263.165 -150.0942 C
275.9321 -150.0273 283.9819 -150.0273 287.3154 -150.0942 C
296.5151 -150.3271 304.5654 -151.0439 311.4653 -152.2441 C
311.4321 -154.0107 311.3652 -155.3271 311.2651 -156.1938 C
310.2651 -162.0273 308.5986 -167.4941 306.2651 -172.5942 C
305.5986 -172.3271 304.8154 -172.1108 303.915 -171.9438 C
282.4819 -169.7773 260.8652 -168.9438 239.0654 -169.4438 C
231.0986 -169.0771 222.1987 -169.0439 212.3652 -169.3442 C
201.7319 -169.6108 195.0654 -170.1606 192.3652 -170.9941 C
f
189.3154 -175.9941 m
190.7817 -175.5605 191.8818 -175.2441 192.6152 -175.0439 C
204.2485 -173.9438 216.0986 -173.5942 228.165 -173.9941 C
244.0317 -173.9941 259.9321 -174.2607 275.8652 -174.7939 C
285.2983 -174.9941 294.6987 -175.7275 304.0654 -176.9941 C
302.332 -179.9609 300.6987 -182.8271 299.165 -185.5942 C
298.6987 -185.5273 298.1987 -185.4775 297.665 -185.4438 C
283.165 -184.7441 272.2651 -184.2109 264.9653 -183.8442 C
251.9321 -183.2109 240.9819 -182.8105 232.1152 -182.644 C
224.8818 -182.5107 215.0654 -182.6772 202.665 -183.144 C
191.6318 -183.5771 185.832 -183.8774 185.2651 -184.0439 C
185.3652 -183.1108 186.7153 -180.4272 189.3154 -175.9941 C
f
*U
*u
0.018952 0 0.488899 0 1 0.968627 0.6 (R=255 G=247 B=153) 0 1 Xk
160.665 -265.394 m
161.8984 -263.2939 162.7817 -261.8105 163.3154 -260.9438 C
170.2153 -250.1772 176.915 -239.2773 183.415 -228.2441 C
185.3486 -225.6772 186.4653 -223.394 186.7651 -221.394 C
184.5654 -222.6274 181.7983 -226.0771 178.4653 -231.7441 C
175.1318 -237.3774 172.582 -241.5942 170.8154 -244.394 C
166.1484 -250.8608 161.582 -257.6938 157.1152 -264.894 C
155.7153 -264.1606 154.8154 -262.9106 154.415 -261.144 C
156.8818 -257.5771 158.6152 -255.0605 159.6152 -253.5942 C
170.415 -238.1606 180.6821 -222.2939 190.415 -205.9941 C
193.2485 -201.9941 195.3154 -198.0771 196.6152 -194.2441 C
196.4819 -194.0771 196.2983 -193.9941 196.0654 -193.9941 C
192.2983 -198.2939 188.5151 -203.3105 184.7153 -209.0439 C
174.1821 -223.0771 164.2153 -237.6606 154.8154 -252.7939 C
154.665 -252.9941 L
156.5986 -244.8271 158.6152 -238.644 160.7153 -234.4438 C
161.0483 -233.8442 165.8652 -226.0942 175.165 -211.1938 C
184.7319 -195.894 189.582 -188.2441 189.7153 -188.2441 C
197.9819 -187.7773 216.0654 -188.0107 243.9653 -188.9438 C
263.2319 -189.6108 280.665 -190.3442 296.2651 -191.144 C
285.2983 -211.4775 274.1821 -231.5942 262.915 -251.4941 C
258.915 -258.0273 254.6821 -265.6108 250.2153 -274.2441 C
249.7817 -272.5107 249.2319 -271.1108 248.5654 -270.0439 C
249.5654 -268.3105 250.2485 -267.1108 250.6152 -266.4438 C
251.4487 -264.9106 252.8652 -262.2109 254.8652 -258.3442 C
257.8652 -250.6938 L
257.7651 -250.394 257.582 -250.2109 257.3154 -250.144 C
253.7153 -253.9775 250.0151 -259.7773 246.2153 -267.5439 C
245.3486 -267.0107 244.415 -266.7275 243.415 -266.6938 C
253.582 -250.7275 263.1152 -234.4941 272.0151 -217.9941 C
272.5483 -217.1606 272.8154 -216.2939 272.8154 -215.394 C
270.0151 -217.6274 267.3652 -221.0771 264.8652 -225.7441 C
255.9653 -239.5107 247.1821 -253.4272 238.5151 -267.4941 C
236.5483 -268.1938 234.5654 -268.894 232.5654 -269.5942 C
240.4985 -256.0605 248.0654 -242.4438 255.2651 -228.7441 C
256.165 -227.5439 256.2983 -226.6772 255.665 -226.144 C
251.4653 -231.1772 247.6484 -236.9272 244.2153 -243.394 C
238.6821 -252.2939 232.9653 -261.4106 227.0654 -270.7441 C
226.5317 -270.7441 226.0317 -270.6938 225.5654 -270.5942 C
223.3984 -269.9272 222.665 -268.144 223.3652 -265.2441 C
233.665 -247.5771 243.7817 -229.8608 253.7153 -212.0942 C
254.8486 -210.7275 255.165 -209.4272 254.665 -208.1938 C
252.0151 -211.144 L
248.165 -216.894 L
245.1987 -221.6938 243.082 -225.144 241.8154 -227.2441 C
238.3486 -232.5439 234.6987 -238.2109 230.8652 -244.2441 C
231.0654 -240.2441 230.0654 -237.1938 227.8652 -235.0942 C
227.9653 -234.894 228.0654 -234.7275 228.165 -234.5942 C
230.6987 -231.1606 231.832 -228.0605 231.5654 -225.2939 C
228.915 -227.9438 L
225.415 -233.4438 L
222.2485 -231.9438 218.1318 -232.144 213.0654 -234.0439 C
207.1318 -236.5771 201.5986 -239.7607 196.4653 -243.5942 C
200.8652 -237.5605 203.4321 -233.1108 204.165 -230.2441 C
204.2319 -229.6772 203.9819 -229.3442 203.415 -229.2441 C
201.582 -230.5771 199.1318 -233.4438 196.0654 -237.8442 C
192.9985 -242.3105 190.7153 -245.6938 189.2153 -247.9941 C
188.915 -248.4272 188.4653 -249.0942 187.8652 -249.9941 C
184.3984 -252.6938 180.8818 -255.2441 177.3154 -257.644 C
188.2817 -242.644 198.8984 -227.3608 209.165 -211.7939 C
211.3652 -209.2275 212.3984 -206.7939 212.2651 -204.4941 C
209.6152 -206.9941 L
205.5151 -212.0942 L
202.2817 -216.3608 200.0483 -219.3774 198.8154 -221.144 C
189.6821 -234.144 180.5654 -247.0942 171.4653 -259.9941 C
171.0986 -260.4609 170.5986 -261.1274 169.9653 -261.9941 C
168.5654 -262.7275 167.1318 -263.4106 165.665 -264.0439 C
163.7319 -264.8105 162.0654 -265.2607 160.665 -265.394 C
f
267.2651 -300.4941 m
273.6318 -288.3608 279.5986 -276.144 285.165 -263.8442 C
285.832 -263.0439 285.9819 -262.394 285.6152 -261.894 C
279.7153 -270.2275 274.4985 -279.3442 269.9653 -289.2441 C
265.5654 -296.5771 261.2651 -304.1108 257.0654 -311.8442 C
255.2983 -313.5107 253.4985 -315.0107 251.665 -316.3442 C
252.5317 -314.7773 253.1821 -313.5942 253.6152 -312.7939 C
260.6152 -301.1274 267.3486 -289.2773 273.8154 -277.2441 C
275.3154 -274.7109 276.165 -272.4775 276.3652 -270.5439 C
270.1987 -277.9438 264.7485 -286.3774 260.0151 -295.8442 C
255.2817 -303.0771 250.2817 -311.0107 245.0151 -319.644 C
244.8154 -319.7109 244.5986 -319.7607 244.3652 -319.7939 C
243.9653 -319.8608 243.5986 -319.8774 243.2651 -319.8442 C
253.2983 -301.9775 262.9321 -283.9438 272.165 -265.7441 C
276.5986 -258.3105 280.5654 -250.7441 284.0654 -243.0439 C
284.1987 -242.6772 284.2651 -242.3271 284.2651 -241.9941 C
281.5654 -244.3271 278.9487 -247.8774 276.415 -252.644 C
264.1821 -272.8442 252.4819 -293.2939 241.3154 -313.9941 C
242.3486 -307.7607 243.4487 -303.2441 244.6152 -300.4438 C
245.9819 -296.9775 247.4487 -292.0273 249.0151 -285.5942 C
253.082 -280.1938 256.1821 -275.3608 258.3154 -271.0942 C
273.8818 -246.2275 288.2485 -220.3442 301.415 -193.4438 C
303.3818 -196.2109 305.7817 -199.4775 308.6152 -203.2441 C
311.4819 -207.0771 313.4819 -209.6606 314.6152 -210.9941 C
313.1484 -213.1606 307.2651 -224.7939 296.9653 -245.894 C
286.2983 -267.6938 279.8486 -281.4775 277.6152 -287.2441 C
274.2485 -291.2109 271.9321 -294.1938 270.665 -296.1938 C
269.665 -297.4609 268.5317 -298.894 267.2651 -300.4941 C
f
*U
*u
0.36704 0.280827 1 0.023896 0.670588 0.627451 0 (R=171 G=160 B=0) 0 1 Xk
154.415 -261.144 m
153.9819 -258.8774 154.0654 -256.1606 154.665 -252.9941 C
154.8154 -252.7939 L
164.2153 -237.6606 174.1821 -223.0771 184.7153 -209.0439 C
188.5151 -203.3105 192.2983 -198.2939 196.0654 -193.9941 C
196.2983 -193.9941 196.4819 -194.0771 196.6152 -194.2441 C
195.3154 -198.0771 193.2485 -201.9941 190.415 -205.9941 C
180.6821 -222.2939 170.415 -238.1606 159.6152 -253.5942 C
158.6152 -255.0605 156.8818 -257.5771 154.415 -261.144 C
f
160.665 -265.394 m
159.1987 -265.5605 158.0151 -265.394 157.1152 -264.894 C
161.582 -257.6938 166.1484 -250.8608 170.8154 -244.394 C
172.582 -241.5942 175.1318 -237.3774 178.4653 -231.7441 C
181.7983 -226.0771 184.5654 -222.6274 186.7651 -221.394 C
186.4653 -223.394 185.3486 -225.6772 183.415 -228.2441 C
176.915 -239.2773 170.2153 -250.1772 163.3154 -260.9438 C
162.7817 -261.8105 161.8984 -263.2939 160.665 -265.394 C
f
241.3154 -313.9941 m
252.4819 -293.2939 264.1821 -272.8442 276.415 -252.644 C
278.9487 -247.8774 281.5654 -244.3271 284.2651 -241.9941 C
284.2651 -242.3271 284.1987 -242.6772 284.0654 -243.0439 C
280.5654 -250.7441 276.5986 -258.3105 272.165 -265.7441 C
262.9321 -283.9438 253.2983 -301.9775 243.2651 -319.8442 C
241.5317 -319.3105 240.8818 -317.3608 241.3154 -313.9941 C
f
251.665 -316.3442 m
249.3984 -317.9438 247.1821 -319.0439 245.0151 -319.644 C
250.2817 -311.0107 255.2817 -303.0771 260.0151 -295.8442 C
264.7485 -286.3774 270.1987 -277.9438 276.3652 -270.5439 C
276.165 -272.4775 275.3154 -274.7109 273.8154 -277.2441 C
267.3486 -289.2773 260.6152 -301.1274 253.6152 -312.7939 C
253.1821 -313.5942 252.5317 -314.7773 251.665 -316.3442 C
f
267.2651 -300.4941 m
264.3652 -304.2607 260.9653 -308.0439 257.0654 -311.8442 C
261.2651 -304.1108 265.5654 -296.5771 269.9653 -289.2441 C
274.4985 -279.3442 279.7153 -270.2275 285.6152 -261.894 C
285.9819 -262.394 285.832 -263.0439 285.165 -263.8442 C
279.5986 -276.144 273.6318 -288.3608 267.2651 -300.4941 C
f
223.3652 -265.2441 m
225.7319 -258.5107 227.9487 -253.1606 230.0151 -249.1938 C
230.4819 -247.4609 230.7651 -245.8105 230.8652 -244.2441 C
234.6987 -238.2109 238.3486 -232.5439 241.8154 -227.2441 C
243.082 -225.144 245.1987 -221.6938 248.165 -216.894 C
252.0151 -211.144 L
254.665 -208.1938 L
255.165 -209.4272 254.8486 -210.7275 253.7153 -212.0942 C
243.7817 -229.8608 233.665 -247.5771 223.3652 -265.2441 C
f
232.5654 -269.5942 m
230.6318 -270.3271 228.7983 -270.7109 227.0654 -270.7441 C
232.9653 -261.4106 238.6821 -252.2939 244.2153 -243.394 C
247.6484 -236.9272 251.4653 -231.1772 255.665 -226.144 C
256.2983 -226.6772 256.165 -227.5439 255.2651 -228.7441 C
248.0654 -242.4438 240.4985 -256.0605 232.5654 -269.5942 C
f
243.415 -266.6938 m
241.8818 -266.6274 240.2485 -266.894 238.5151 -267.4941 C
247.1821 -253.4272 255.9653 -239.5107 264.8652 -225.7441 C
267.3652 -221.0771 270.0151 -217.6274 272.8154 -215.394 C
272.8154 -216.2939 272.5483 -217.1606 272.0151 -217.9941 C
263.1152 -234.4941 253.582 -250.7275 243.415 -266.6938 C
f
248.5654 -270.0439 m
247.8652 -268.8774 247.082 -268.0439 246.2153 -267.5439 C
250.0151 -259.7773 253.7153 -253.9775 257.3154 -250.144 C
257.582 -250.2109 257.7651 -250.394 257.8652 -250.6938 C
254.8652 -258.3442 L
252.8652 -262.2109 251.4487 -264.9106 250.6152 -266.4438 C
250.2485 -267.1108 249.5654 -268.3105 248.5654 -270.0439 C
f
177.3154 -257.644 m
174.9487 -259.2441 172.4985 -260.6938 169.9653 -261.9941 C
170.5986 -261.1274 171.0986 -260.4609 171.4653 -259.9941 C
180.5654 -247.0942 189.6821 -234.144 198.8154 -221.144 C
200.0483 -219.3774 202.2817 -216.3608 205.5151 -212.0942 C
209.6152 -206.9941 L
212.2651 -204.4941 L
212.3984 -206.7939 211.3652 -209.2275 209.165 -211.7939 C
198.8984 -227.3608 188.2817 -242.644 177.3154 -257.644 C
f
227.8652 -235.0942 m
227.165 -234.394 226.3486 -233.8442 225.415 -233.4438 C
228.915 -227.9438 L
231.5654 -225.2939 L
231.832 -228.0605 230.6987 -231.1606 228.165 -234.5942 C
228.0654 -234.7275 227.9653 -234.894 227.8652 -235.0942 C
f
187.8652 -249.9941 m
188.4653 -249.0942 188.915 -248.4272 189.2153 -247.9941 C
190.7153 -245.6938 192.9985 -242.3105 196.0654 -237.8442 C
199.1318 -233.4438 201.582 -230.5771 203.415 -229.2441 C
203.9819 -229.3442 204.2319 -229.6772 204.165 -230.2441 C
203.4321 -233.1108 200.8652 -237.5605 196.4653 -243.5942 C
193.5986 -245.6938 190.7319 -247.8271 187.8652 -249.9941 C
f
*U
*u
0.004456 0.991424 0.973236 0.000946 0.929412 0.109804 0.141176 (R=237 G=28 B=36) 0 1 Xk
151.8154 -263.5942 m
151.915 -263.8608 152.0151 -264.0942 152.1152 -264.2939 C
152.9487 -266.0273 153.9985 -267.2607 155.2651 -267.9941 C
156.2319 -268.5605 157.2983 -268.9106 158.4653 -269.0439 C
160.832 -269.3105 163.415 -268.9272 166.2153 -267.894 C
167.8486 -267.3271 169.4819 -266.6274 171.1152 -265.7939 C
175.3154 -263.6274 179.0151 -261.3442 182.2153 -258.9438 C
184.0483 -257.644 185.5151 -256.5605 186.6152 -255.6938 C
187.4819 -255.0273 188.5151 -254.2607 189.7153 -253.394 C
200.3818 -244.4941 210.7651 -238.7939 220.8652 -236.2939 C
221.9653 -236.2939 222.8818 -236.4609 223.6152 -236.7939 C
224.582 -237.2607 225.2651 -237.9775 225.665 -238.9438 C
225.8652 -239.4106 225.9985 -239.9106 226.0654 -240.4438 C
226.0317 -240.9775 225.9653 -241.4438 225.8652 -241.8442 C
224.5317 -245.4438 222.4321 -250.1108 219.5654 -255.8442 C
216.6987 -261.5771 215.5317 -266.7109 216.0654 -271.2441 C
216.3984 -272.7109 217.1152 -273.9775 218.2153 -275.0439 C
219.5483 -276.2109 221.3154 -276.8105 223.5151 -276.8442 C
225.1821 -276.8442 226.915 -276.6274 228.7153 -276.1938 C
230.2153 -275.8271 231.665 -275.3608 233.0654 -274.7939 C
233.5986 -274.6606 234.0986 -274.5107 234.5654 -274.3442 C
235.332 -274.0771 236.0986 -273.7939 236.8652 -273.4941 C
238.1318 -272.9609 239.2153 -272.5605 240.1152 -272.2939 C
241.5483 -271.894 242.6318 -271.8271 243.3652 -272.0942 C
243.9321 -272.3608 244.3984 -272.7939 244.7651 -273.394 C
244.9321 -274.0942 245.0986 -274.7607 245.2651 -275.394 C
245.5317 -276.4609 245.6821 -277.2607 245.7153 -277.7939 C
245.2485 -284.3271 243.4653 -291.2607 240.3652 -298.5942 C
237.2651 -305.9272 236.0317 -312.6274 236.665 -318.6938 C
236.8652 -319.6606 237.1152 -320.4941 237.415 -321.1938 C
238.1821 -322.894 239.2153 -324.0107 240.5151 -324.5439 C
241.082 -324.7441 241.6821 -324.8608 242.3154 -324.894 C
243.8818 -324.9609 245.582 -324.5942 247.415 -323.7939 C
249.082 -323.0605 250.7485 -322.1274 252.415 -320.9941 C
254.915 -319.2607 257.2153 -317.4272 259.3154 -315.4941 C
261.7817 -313.2607 263.5654 -311.4941 264.665 -310.1938 C
267.1318 -307.394 269.6987 -304.3608 272.3652 -301.0942 C
269.1318 -309.8271 265.8984 -318.5942 262.665 -327.394 C
259.2319 -338.1274 254.165 -346.2109 247.4653 -351.644 C
244.7983 -353.8105 239.7153 -354.9775 232.2153 -355.144 C
229.7485 -355.2109 224.082 -355.0107 215.2153 -354.5439 C
214.0151 -354.5439 212.2651 -354.9775 209.9653 -355.8442 C
206.4985 -357.144 203.915 -359.0107 202.2153 -361.4434 C
197.082 -373.2432 195.832 -385.5605 198.4653 -398.3936 C
199.4653 -403.2266 201.0151 -409.4932 203.1152 -417.1934 C
205.582 -426.2266 207.165 -432.2266 207.8652 -435.1934 C
210.0654 -444.46 209.5654 -451.5771 206.3652 -456.5439 C
203.6987 -460.6768 200.3652 -462.2432 196.3652 -461.2432 C
190.7651 -458.0098 187.2319 -450.9434 185.7651 -440.0439 C
184.2651 -429.1768 183.7319 -420.6602 184.165 -414.4932 C
185.1318 -403.9932 185.8984 -390.7432 186.4653 -374.7432 C
187.0654 -358.7773 184.165 -346.7109 177.7651 -338.5439 C
175.4653 -336.1108 173.082 -334.5942 170.6152 -333.9941 C
166.1484 -332.8608 162.415 -335.1938 159.415 -340.9941 C
157.6484 -344.4272 156.582 -347.7275 156.2153 -350.894 C
155.9487 -353.3608 156.0654 -356.6274 156.5654 -360.6934 C
157.0654 -364.7598 157.2983 -367.9434 157.2651 -370.2432 C
157.165 -373.6436 156.582 -376.71 155.5151 -379.4434 C
154.8154 -381.2773 153.7983 -382.5938 152.4653 -383.3936 C
151.1987 -384.1602 149.915 -384.3438 148.6152 -383.9434 C
145.5151 -382.9434 144.1318 -379.8438 144.4653 -374.6436 C
145.2983 -365.2432 145.915 -358.0942 146.3154 -353.1938 C
147.0151 -344.394 147.1152 -336.9438 146.6152 -330.8442 C
146.2817 -326.8105 144.8154 -322.7939 142.2153 -318.7939 C
139.6821 -314.9272 136.1987 -311.2441 131.7651 -307.7441 C
128.3652 -305.0771 126.2817 -301.4106 125.5151 -296.7441 C
124.915 -293.2773 125.0483 -290.1606 125.915 -287.394 C
128.2485 -279.9272 132.0151 -272.3608 137.2153 -264.6938 C
141.3818 -258.5605 146.8984 -251.7773 153.7651 -244.3442 C
151.665 -249.7773 150.7153 -254.8105 150.915 -259.4438 C
151.0151 -260.9106 151.3154 -262.2939 151.8154 -263.5942 C
f
1 D
135.3652 -275.5439 m
131.9648 -280.0474 130.8315 -285.9307 131.9653 -293.1938 C
132.5654 -297.1938 133.6152 -300.7109 135.1152 -303.7441 C
135.5483 -304.6108 136.0151 -305.4106 136.5151 -306.144 C
138.8486 -310.1108 141.8984 -312.5439 145.665 -313.4438 C
142.165 -307.894 L
139.6318 -304.5293 137.7817 -300.8125 136.6152 -296.7441 C
135.8486 -294.3784 135.0654 -290.8701 134.2651 -286.2192 C
133.6904 -282.8784 134.0571 -279.3198 135.3652 -275.5439 C
f
206.7153 -345.7939 m
207.082 -347.4272 209.3154 -348.6274 213.415 -349.394 C
222.6484 -351.1938 231.332 -350.3271 239.4653 -346.7939 C
247.6987 -343.1938 253.915 -337.4941 258.1152 -329.6938 C
258.9487 -328.1274 259.2319 -326.7275 258.9653 -325.4941 C
257.9985 -326.894 256.5317 -329.0273 254.5654 -331.894 C
252.665 -334.3271 250.582 -336.2607 248.3154 -337.6938 C
242.8154 -341.1606 237.2485 -343.4272 231.6152 -344.4941 C
225.8154 -345.5942 219.3652 -345.5439 212.2651 -344.3442 C
208.1987 -343.6772 206.3486 -344.1606 206.7153 -345.7939 C
f
201.5654 -443.0439 m
201.3984 -446.4434 201.0317 -449.0439 200.4653 -450.8438 C
199.9321 -452.71 199.0151 -454.3438 197.7153 -455.7432 C
198.814 -456.375 199.8975 -456.5664 200.9653 -456.3184 C
202.0352 -456.0742 203.1265 -454.3906 204.2402 -451.2686 C
205.3535 -448.1465 205.2534 -442.9385 203.9404 -435.6436 C
202.6245 -428.3457 201.6831 -424.8115 201.1152 -425.0439 C
201.1152 -426.1436 201.2319 -428.877 201.4653 -433.2432 C
201.665 -437.1104 201.6987 -440.377 201.5654 -443.0439 C
f
*U
*u
0 D
0 0 0 0 1 1 1 (White) 0 1 Xk
135.3652 -275.5439 m
134.0571 -279.3198 133.6904 -282.8784 134.2651 -286.2192 C
135.0654 -290.8701 135.8486 -294.3784 136.6152 -296.7441 C
137.7817 -300.8125 139.6318 -304.5293 142.165 -307.894 C
145.665 -313.4438 L
141.8984 -312.5439 138.8486 -310.1108 136.5151 -306.144 C
136.0151 -305.4106 135.5483 -304.6108 135.1152 -303.7441 C
133.6152 -300.7109 132.5654 -297.1938 131.9653 -293.1938 C
130.8315 -285.9307 131.9648 -280.0474 135.3652 -275.5439 C
f
206.7153 -345.7939 m
206.3486 -344.1606 208.1987 -343.6772 212.2651 -344.3442 C
219.3652 -345.5439 225.8154 -345.5942 231.6152 -344.4941 C
237.2485 -343.4272 242.8154 -341.1606 248.3154 -337.6938 C
250.582 -336.2607 252.665 -334.3271 254.5654 -331.894 C
256.5317 -329.0273 257.9985 -326.894 258.9653 -325.4941 C
259.2319 -326.7275 258.9487 -328.1274 258.1152 -329.6938 C
253.915 -337.4941 247.6987 -343.1938 239.4653 -346.7939 C
231.332 -350.3271 222.6484 -351.1938 213.415 -349.394 C
209.3154 -348.6274 207.082 -347.4272 206.7153 -345.7939 C
f
201.5654 -443.0439 m
201.6987 -440.377 201.665 -437.1104 201.4653 -433.2432 C
201.2319 -428.877 201.1152 -426.1436 201.1152 -425.0439 C
201.6831 -424.8115 202.6245 -428.3457 203.9404 -435.6436 C
205.2534 -442.9385 205.3535 -448.1465 204.2402 -451.2686 C
203.1265 -454.3906 202.0352 -456.0742 200.9653 -456.3184 C
199.8975 -456.5664 198.814 -456.375 197.7153 -455.7432 C
199.0151 -454.3438 199.9321 -452.71 200.4653 -450.8438 C
201.0317 -449.0439 201.3984 -446.4434 201.5654 -443.0439 C
f
*U
*u
0.315953 0.491829 0.739315 0.098909 0.65098 0.486275 0.321569 (R=166 G=124 B=82) 0 1 Xk
304.8154 -62.7939 m
304.3154 -64.2939 L
302.7485 -71.5273 303.5654 -75.5439 306.7651 -76.3442 C
309.9321 -77.144 314.1484 -74.5942 319.415 -68.6938 C
320.9487 -66.9941 322.082 -65.3105 322.8154 -63.644 C
323.1821 -62.7773 323.8486 -60.7607 324.8154 -57.5942 C
325.582 -55.0273 325.6821 -52.7275 325.1152 -50.6938 C
324.582 -48.6938 323.4819 -47.1772 321.8154 -46.144 C
317.915 -45.4106 314.2817 -47.3442 310.915 -51.9438 C
314.4487 -43.5439 319.5151 -36.5771 326.1152 -31.0439 C
332.1484 -30.5771 336.5317 -32.0273 339.2651 -35.394 C
339.4653 -35.6606 339.6484 -35.9272 339.8154 -36.1938 C
339.7153 -37.3271 339.6152 -38.144 339.5151 -38.644 C
336.3818 -50.2109 330.5151 -61.7607 321.915 -73.2939 C
313.2817 -84.8271 305.2983 -95.394 297.9653 -104.9941 C
288.665 -117.0942 280.1152 -129.9941 272.3154 -143.6938 C
270.2485 -143.7607 268.1987 -143.8271 266.165 -143.894 C
268.6318 -139.7275 270.332 -136.7275 271.2651 -134.894 C
280.8652 -118.1606 287.5483 -100.5605 291.3154 -82.0942 C
293.4487 -67.7275 297.8486 -55.2441 304.5151 -44.644 C
307.7485 -40.5107 311.3154 -37.1606 315.2153 -34.5942 C
317.0483 -33.7607 318.6152 -33.0771 319.915 -32.5439 C
314.3154 -40.0439 310.4653 -46.4941 308.3652 -51.894 C
307.2983 -54.2275 306.1152 -57.8608 304.8154 -62.7939 C
f
341.6152 -39.9438 m
343.7485 -48.8774 341.7485 -58.5273 335.6152 -68.894 C
329.4819 -79.2607 323.7319 -87.5942 318.3652 -93.894 C
317.7651 -94.6606 317.1318 -95.4609 316.4653 -96.2939 C
314.9985 -97.8271 313.9985 -98.894 313.4653 -99.4941 C
303.6987 -109.4941 294.6987 -119.9106 286.4653 -130.7441 C
283.4321 -134.4106 280.3984 -138.6938 277.3652 -143.5942 C
276.7651 -143.5942 276.1484 -143.6108 275.5151 -143.644 C
282.8818 -131.5771 290.6987 -119.9272 298.9653 -108.6938 C
308.165 -96.4272 317.2153 -84.0942 326.1152 -71.6938 C
332.6484 -63.0273 337.8154 -52.4438 341.6152 -39.9438 C
f
263.0151 -143.9941 m
261.7817 -144.0605 260.5654 -144.1108 259.3652 -144.144 C
271.6987 -122.2773 281.2485 -99.4272 288.0151 -75.5942 C
289.2817 -71.8608 291.0317 -67.644 293.2651 -62.9438 C
289.8984 -81.0107 284.665 -98.8105 277.5654 -116.3442 C
272.832 -125.6108 267.9819 -134.8271 263.0151 -143.9941 C
f
279.2651 -143.5942 m
283.7319 -138.1606 287.165 -133.8774 289.5654 -130.7441 C
290.6318 -129.3105 291.7319 -127.9106 292.8652 -126.5439 C
289.5986 -131.4106 286.8984 -136.3442 284.7651 -141.3442 C
284.3984 -142.2109 284.1821 -142.9609 284.1152 -143.5942 C
282.5151 -143.5942 280.8984 -143.5942 279.2651 -143.5942 C
f
*U
*u
0.226719 0.383947 0.636683 0.01181 0.776471 0.611765 0.427451 (R=198 G=156 B=109) 0 1 Xk
339.8154 -36.1938 m
340.582 -37.394 341.1821 -38.644 341.6152 -39.9438 C
337.8154 -52.4438 332.6484 -63.0273 326.1152 -71.6938 C
317.2153 -84.0942 308.165 -96.4272 298.9653 -108.6938 C
290.6987 -119.9272 282.8818 -131.5771 275.5151 -143.644 C
274.4487 -143.6772 273.3818 -143.6938 272.3154 -143.6938 C
280.1152 -129.9941 288.665 -117.0942 297.9653 -104.9941 C
305.2983 -95.394 313.2817 -84.8271 321.915 -73.2939 C
330.5151 -61.7607 336.3818 -50.2109 339.5151 -38.644 C
339.6152 -38.144 339.7153 -37.3271 339.8154 -36.1938 C
f
316.4653 -96.2939 m
308.3984 -105.6606 300.5317 -115.7441 292.8652 -126.5439 C
291.7319 -127.9106 290.6318 -129.3105 289.5654 -130.7441 C
287.165 -133.8774 283.7319 -138.1606 279.2651 -143.5942 C
278.6318 -143.5942 277.9985 -143.5942 277.3652 -143.5942 C
280.3984 -138.6938 283.4321 -134.4106 286.4653 -130.7441 C
294.6987 -119.9106 303.6987 -109.4941 313.4653 -99.4941 C
313.9985 -98.894 314.9985 -97.8271 316.4653 -96.2939 C
f
263.0151 -143.9941 m
267.9819 -134.8271 272.832 -125.6108 277.5654 -116.3442 C
284.665 -98.8105 289.8984 -81.0107 293.2651 -62.9438 C
296.2651 -56.5439 300.0151 -50.4438 304.5151 -44.644 C
297.8486 -55.2441 293.4487 -67.7275 291.3154 -82.0942 C
287.5483 -100.5605 280.8652 -118.1606 271.2651 -134.894 C
270.332 -136.7275 268.6318 -139.7275 266.165 -143.894 C
265.0986 -143.9272 264.0483 -143.9609 263.0151 -143.9941 C
f
304.8154 -62.7939 m
306.1152 -57.8608 307.2983 -54.2275 308.3652 -51.894 C
310.4653 -46.4941 314.3154 -40.0439 319.915 -32.5439 C
320.7153 -32.1772 321.3486 -31.9438 321.8154 -31.8442 C
323.3154 -31.4438 324.7485 -31.1772 326.1152 -31.0439 C
319.5151 -36.5771 314.4487 -43.5439 310.915 -51.9438 C
308.0483 -55.8105 306.0151 -59.4272 304.8154 -62.7939 C
f
*U
U
U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
